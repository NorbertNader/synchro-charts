(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{1014:function(e,n,t){"use strict";t.r(n),t.d(n,"monitor_angled_line_segment",(function(){return p}));var o=t(64),r=t(43),i=(t(144),t(71),t(105),t(52),t(72),t(1145),t(1150),t(1172)),a=(t(1146),t(1162),t(1169),t(1170),t(1158),t(1152),t(1160),t(1154),t(1148),t(1178)),s=t(1180),l=new Date(2e3,0,0),c=new Date(2e3,0,1),u=c.getTime()-l.getTime(),h={x:l.getTime()+u/3,y:0+100/3},d={x:l.getTime()+u*(2/3),y:0+2/3*100},p=function(){function e(e){Object(o.i)(this,e)}return e.prototype.componentDidLoad=function(){var e=this.el.querySelector("#test-container"),n=Object(a.a)({viewPort:{start:l,end:c,yMin:0,yMax:100},dataStreams:[{id:"test-stream",name:"test-stream-name",color:"black",data:[h,d],resolution:0,dataType:r.a.NUMBER}],container:e,minBufferSize:100,bufferFactor:2,chartSize:s.a,thresholdOptions:{showColor:!1},thresholds:[]});i.b.addChartScene(n);var t=e.getBoundingClientRect();i.b.setChartRect(n.id,Object.assign({density:1},t.toJSON()))},e.prototype.render=function(){return Object(o.h)("monitor-webgl-context",null,Object(o.h)("div",{id:"test-container",style:{width:s.a.width+"px",height:s.a.height+"px"}}))},Object.defineProperty(e.prototype,"el",{get:function(){return Object(o.g)(this)},enumerable:!0,configurable:!0}),e}()},1161:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return f})),t.d(n,"c",(function(){return d})),t.d(n,"d",(function(){return m})),t.d(n,"e",(function(){return u})),t.d(n,"f",(function(){return g}));var o=t(1139),r=t(1149),i=t(1144),a=t(1151),s=t(1147),l=function(e){return"\nvarying vec3 vColor;\n"+(e?"varying float positionY;":"")+"\nattribute vec3 pointColor;\nuniform float pointDiameter;\nuniform float devicePixelRatio;\n\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position.x, position.y, 0.0, 1.0);\n  gl_PointSize = pointDiameter * devicePixelRatio;\n  vColor = pointColor;\n  "+(e?"positionY = position.y;":"")+"\n}\n"},c=12,u=function(e){if(0===e.length)return[];var n=Object(s.g)(e),t=Object(s.j)(n).reverse(),r=[],i=new Set;t.forEach((function(e,n){var l=e.value;if(t[n].comparisonOperator!==o.a.EQUAL)if(0!==n){var c=t[n-1],u=c.value,h=(u+l)/2,d=Object(s.a)(h,t);if(null!=d&&!i.has(c.value)){var p=Object(a.d)(d.color);x=p[0],w=p[1],P=p[2],c.comparisonOperator===o.a.EQUAL&&(c.value,t[n].value),r.push({upper:u,lower:l,color:[x,w,P]}),i.add(c.value)}if(n!==t.length-1){var f=t[n+1].value;if(h=(l+f)/2,null!=(d=Object(s.a)(h,t))&&!i.has(l)){var v=Object(a.d)(d.color);x=v[0],w=v[1],P=v[2],r.push({upper:l,lower:f,color:[x,w,P]}),i.add(e.value)}}else if(h=(l+Number.MIN_SAFE_INTEGER)/2,null!=(d=Object(s.a)(h,t))&&!i.has(l)){var m=Object(a.d)(d.color);x=m[0],w=m[1],P=m[2],r.push({lower:Number.MIN_SAFE_INTEGER,upper:l,color:[x,w,P]})}}else{var g=(Number.MAX_SAFE_INTEGER+l)/2,y=Object(s.a)(g,t);if(null!=y){var b=Object(a.d)(y.color),x=b[0],w=b[1],P=b[2];r.push({upper:Number.MAX_SAFE_INTEGER,lower:l,color:[x,w,P]})}}else{var S=Object(a.d)(t[n].color);x=S[0],w=S[1],P=S[2];r.push({upper:l,lower:l,color:[x,w,P]})}}));for(var l=r[r.length-1];r.length<c;){var u=t[t.length-1].value,h=Number.MIN_SAFE_INTEGER+u/2,d=Object(s.a)(h,t);if(null==d)r.push(l);else{var p=Object(a.d)(d.color),f=p[0],v=p[1],m=p[2];l={lower:Number.MIN_SAFE_INTEGER,upper:u,color:[f,v,m]},r.push(l)}}return r},h="\n#define MAX_NUM_TOTAL_THRESHOLD_BAND "+c+"\n\nstruct Band {\n  float upper;\n  float lower;\n  vec3 color;\n};\n\nvarying vec3 vColor;\nvarying float positionY;\n\nuniform Band thresholdBands[MAX_NUM_TOTAL_THRESHOLD_BAND];\nuniform float yPixelDensity;\n\nvoid main() {\n  // calculate position such that the center is (0, 0) in a region of [-1, 1] x [-1, 1]\n  vec2 pos = 2.0 * gl_PointCoord.xy - 1.0;\n  // r = distance squared from the origin of the point being rendered\n  float r = dot(pos, pos);\n  if (r > 1.0) {\n    discard;\n  }\n  float alpha = 1.0 - smoothstep(0.5, 1.0, sqrt(r));\n\n  for(int i = 0; i < MAX_NUM_TOTAL_THRESHOLD_BAND; i++) {\n    bool isRangeBreached = positionY >= thresholdBands[i].lower && positionY <= thresholdBands[i].upper;\n    bool isEqualsThreshold = thresholdBands[i].lower == thresholdBands[i].upper;\n    bool isEqualsThresholdBreached = positionY == thresholdBands[i].upper;\n\n    if (isRangeBreached || (isEqualsThreshold && isEqualsThresholdBreached)) {\n       gl_FragColor = vec4(thresholdBands[i].color /255.0, alpha);\n       break;\n    } else {\n       gl_FragColor = vec4(vColor, alpha);\n    }\n  }\n}\n",d=0,p=function(e){return 0===(null!=e[0]?e[0].resolution:null)?4:6.25},f=2,v=function(e,n,t){var o=n.filter(i.a).map((function(e){return Object(a.f)(e,e.resolution)})).flat(),r=e.attributes,s=r.position,l=r.pointColor;o.forEach((function(e,n){var o=e[0],r=e[1],i=e[2],a=e[3],c=e[4];s.array[n*f]=t(o),s.array[n*f+1]=r,l.array[3*n]=i,l.array[3*n+1]=a,l.array[3*n+2]=c})),e.setDrawRange(0,o.length),s.needsUpdate=!0,l.needsUpdate=!0},m=function(e){var n=e.toClipSpace,t=e.dataStreams,o=e.minBufferSize,i=e.bufferFactor,s=e.thresholdOptions,c=e.thresholds,d=Math.max(o,Object(a.e)(t)*i),m=new r.a;!function(e,n){e.setAttribute("position",new r.i(new Float32Array(n*f),f)),e.setAttribute("pointColor",new r.i(new Uint8Array(3*n),3,!0))}(m,d),v(m,t,n);var g=s.showColor,y=void 0===g||g,b=new r.g({vertexShader:l(y&&c.length>0),fragmentShader:y&&0!==c.length?h:"\nvarying vec3 vColor;\n\nvoid main() {\n  // calculate position such that the center is (0, 0) in a region of [-1, 1] x [-1, 1]\n  vec2 pos = 2.0 * gl_PointCoord.xy - 1.0;\n  // r = distance squared from the origin of the point being rendered\n  float r = dot(pos, pos);\n  if (r > 1.0) {\n    discard;\n  }\n  float alpha = 1.0 - smoothstep(0.5, 1.0, sqrt(r));\n  gl_FragColor = vec4(vColor, alpha);\n}\n",transparent:!0,uniforms:{pointDiameter:{value:p(t)},devicePixelRatio:{value:window.devicePixelRatio},thresholdBands:{value:u(c)}}}),x=new r.e(m,b);return x.frustumCulled=!1,x},g=function(e,n,t,o){void 0===o&&(o=!0),n.material.uniforms.pointDiameter.value=p(e),n.material.uniforms.devicePixelRatio.value=window.devicePixelRatio,o&&v(n.geometry,e,t)}},1162:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return f})),t.d(n,"c",(function(){return d})),t.d(n,"d",(function(){return m})),t.d(n,"e",(function(){return u})),t.d(n,"f",(function(){return g}));var o=t(71),r=t(1150),i=t(1146),a=t(1152),s=t(1148),l=function(e){return"\nvarying vec3 vColor;\n"+(e?"varying float positionY;":"")+"\nattribute vec3 pointColor;\nuniform float pointDiameter;\nuniform float devicePixelRatio;\n\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position.x, position.y, 0.0, 1.0);\n  gl_PointSize = pointDiameter * devicePixelRatio;\n  vColor = pointColor;\n  "+(e?"positionY = position.y;":"")+"\n}\n"},c=12,u=function(e){if(0===e.length)return[];var n=Object(s.g)(e),t=Object(s.j)(n).reverse(),r=[],i=new Set;t.forEach((function(e,n){var l=e.value;if(t[n].comparisonOperator!==o.a.EQUAL)if(0!==n){var c=t[n-1],u=c.value,h=(u+l)/2,d=Object(s.a)(h,t);if(null!=d&&!i.has(c.value)){var p=Object(a.d)(d.color);x=p[0],w=p[1],P=p[2],c.comparisonOperator===o.a.EQUAL&&(c.value,t[n].value),r.push({upper:u,lower:l,color:[x,w,P]}),i.add(c.value)}if(n!==t.length-1){var f=t[n+1].value;if(h=(l+f)/2,null!=(d=Object(s.a)(h,t))&&!i.has(l)){var v=Object(a.d)(d.color);x=v[0],w=v[1],P=v[2],r.push({upper:l,lower:f,color:[x,w,P]}),i.add(e.value)}}else if(h=(l+Number.MIN_SAFE_INTEGER)/2,null!=(d=Object(s.a)(h,t))&&!i.has(l)){var m=Object(a.d)(d.color);x=m[0],w=m[1],P=m[2],r.push({lower:Number.MIN_SAFE_INTEGER,upper:l,color:[x,w,P]})}}else{var g=(Number.MAX_SAFE_INTEGER+l)/2,y=Object(s.a)(g,t);if(null!=y){var b=Object(a.d)(y.color),x=b[0],w=b[1],P=b[2];r.push({upper:Number.MAX_SAFE_INTEGER,lower:l,color:[x,w,P]})}}else{var S=Object(a.d)(t[n].color);x=S[0],w=S[1],P=S[2];r.push({upper:l,lower:l,color:[x,w,P]})}}));for(var l=r[r.length-1];r.length<c;){var u=t[t.length-1].value,h=Number.MIN_SAFE_INTEGER+u/2,d=Object(s.a)(h,t);if(null==d)r.push(l);else{var p=Object(a.d)(d.color),f=p[0],v=p[1],m=p[2];l={lower:Number.MIN_SAFE_INTEGER,upper:u,color:[f,v,m]},r.push(l)}}return r},h="\n#define MAX_NUM_TOTAL_THRESHOLD_BAND "+c+"\n\nstruct Band {\n  float upper;\n  float lower;\n  vec3 color;\n};\n\nvarying vec3 vColor;\nvarying float positionY;\n\nuniform Band thresholdBands[MAX_NUM_TOTAL_THRESHOLD_BAND];\nuniform float yPixelDensity;\n\nvoid main() {\n  // calculate position such that the center is (0, 0) in a region of [-1, 1] x [-1, 1]\n  vec2 pos = 2.0 * gl_PointCoord.xy - 1.0;\n  // r = distance squared from the origin of the point being rendered\n  float r = dot(pos, pos);\n  if (r > 1.0) {\n    discard;\n  }\n  float alpha = 1.0 - smoothstep(0.5, 1.0, sqrt(r));\n\n  for(int i = 0; i < MAX_NUM_TOTAL_THRESHOLD_BAND; i++) {\n    bool isRangeBreached = positionY >= thresholdBands[i].lower && positionY <= thresholdBands[i].upper;\n    bool isEqualsThreshold = thresholdBands[i].lower == thresholdBands[i].upper;\n    bool isEqualsThresholdBreached = positionY == thresholdBands[i].upper;\n\n    if (isRangeBreached || (isEqualsThreshold && isEqualsThresholdBreached)) {\n       gl_FragColor = vec4(thresholdBands[i].color /255.0, alpha);\n       break;\n    } else {\n       gl_FragColor = vec4(vColor, alpha);\n    }\n  }\n}\n",d=0,p=function(e){return 0===(null!=e[0]?e[0].resolution:null)?4:6.25},f=2,v=function(e,n,t){var o=n.filter(i.a).map((function(e){return Object(a.f)(e,e.resolution)})).flat(),r=e.attributes,s=r.position,l=r.pointColor;o.forEach((function(e,n){var o=e[0],r=e[1],i=e[2],a=e[3],c=e[4];s.array[n*f]=t(o),s.array[n*f+1]=r,l.array[3*n]=i,l.array[3*n+1]=a,l.array[3*n+2]=c})),e.setDrawRange(0,o.length),s.needsUpdate=!0,l.needsUpdate=!0},m=function(e){var n=e.toClipSpace,t=e.dataStreams,o=e.minBufferSize,i=e.bufferFactor,s=e.thresholdOptions,c=e.thresholds,d=Math.max(o,Object(a.e)(t)*i),m=new r.a;!function(e,n){e.setAttribute("position",new r.i(new Float32Array(n*f),f)),e.setAttribute("pointColor",new r.i(new Uint8Array(3*n),3,!0))}(m,d),v(m,t,n);var g=s.showColor,y=void 0===g||g,b=new r.g({vertexShader:l(y&&c.length>0),fragmentShader:y&&0!==c.length?h:"\nvarying vec3 vColor;\n\nvoid main() {\n  // calculate position such that the center is (0, 0) in a region of [-1, 1] x [-1, 1]\n  vec2 pos = 2.0 * gl_PointCoord.xy - 1.0;\n  // r = distance squared from the origin of the point being rendered\n  float r = dot(pos, pos);\n  if (r > 1.0) {\n    discard;\n  }\n  float alpha = 1.0 - smoothstep(0.5, 1.0, sqrt(r));\n  gl_FragColor = vec4(vColor, alpha);\n}\n",transparent:!0,uniforms:{pointDiameter:{value:p(t)},devicePixelRatio:{value:window.devicePixelRatio},thresholdBands:{value:u(c)}}}),x=new r.e(m,b);return x.frustumCulled=!1,x},g=function(e,n,t,o){void 0===o&&(o=!0),n.material.uniforms.pointDiameter.value=p(e),n.material.uniforms.devicePixelRatio.value=window.devicePixelRatio,o&&v(n.geometry,e,t)}},1175:function(e,n,t){"use strict";t.d(n,"a",(function(){return f})),t.d(n,"b",(function(){return v}));var o=t(1149),r=t(1144),i=t(1161),a=t(1151),s=t(1147),l=function(e){return"\nprecision highp float;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float width;\nuniform float xPixelDensity;\nuniform float yPixelDensity;\nattribute vec2 currPoint;\nattribute vec2 nextPoint;\nattribute vec2 position;\nattribute vec3 segmentColor;\nvarying vec3 vColor;\n"+(e?"varying float yPositionPx;":"")+"\n\n// line shader using instanced lines\n// https://wwwtyro.net/2019/11/18/instanced-lines.html for information on this approach\nvoid main() {\n  // Convert the points to pixel coordinates - otherwise out basis vectors won't be perpendicular when\n  // rasterized to the screen.\n  vec2 currPointPx = vec2(currPoint.x / xPixelDensity, currPoint.y / yPixelDensity);\n  vec2 nextPointPx = vec2(nextPoint.x / xPixelDensity, nextPoint.y / yPixelDensity);\n\n  // create the basis vectors of a coordinate space where the x axis is parallel with\n  // the path between currPoint and nextPoint, and the y axis is perpendicular to the\n  // path between currPoint and nextPoint\n  vec2 xBasis = nextPointPx - currPointPx;\n  vec2 yBasis = normalize(vec2(-xBasis.y, xBasis.x));\n\n  // project the instance segment along the basis vectors\n  vec2 positionPx = currPointPx + xBasis * position.x + yBasis * width * position.y;\n\n  // Convert from pixel coordinates back to model space\n  vec2 positionModel = vec2(positionPx.x * xPixelDensity, positionPx.y * yPixelDensity);\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(positionModel, 0.0, 1.0);\n  vColor = segmentColor;\n  "+(e?"yPositionPx = positionPx.y;":"")+"\n}\n"},c="\n// This file is only being used when we have threshold bands\n// that will break the line segments into different color\n#define MAX_NUM_TOTAL_THRESHOLD_BAND "+i.a+"\n\nprecision highp float;\nstruct Band {\n  float upper;\n  float lower;\n  vec3 color;\n};\n\nvarying vec3 vColor;\nvarying float yPositionPx;\nuniform float yPixelDensity;\nuniform Band thresholdBands[MAX_NUM_TOTAL_THRESHOLD_BAND];\n\n// Fills in triangles which make up a line segment, with the corresponding color\nvoid main() {\n  for(int i = 0; i < MAX_NUM_TOTAL_THRESHOLD_BAND; i++) {\n    bool isRangeBreached = yPositionPx > thresholdBands[i].lower / yPixelDensity\n      && yPositionPx < thresholdBands[i].upper / yPixelDensity;\n    bool isEqualsThreshold = thresholdBands[i].lower == thresholdBands[i].upper;\n    bool isEqualsThresholdBreached = yPositionPx == thresholdBands[i].upper;\n\n    if (isRangeBreached || (isEqualsThreshold && isEqualsThresholdBreached)) {\n       gl_FragColor = vec4(thresholdBands[i].color / 255.0, 1.0);\n       break;\n    } else {\n       gl_FragColor = vec4(vColor, 1.0);\n    }\n  }\n}\n",u=function(e){var n=e.viewPort,t=n.end,o=n.start,r=n.yMax,i=n.yMin,a=e.toClipSpace,s=e.size,l=s.width,c=s.height;return{x:Math.abs((a(t.getTime())-a(o.getTime()))/l),y:Math.abs((r-i)/c)}},h=function(e,n,t){var o=e.filter(r.a).map((function(e){return Object(a.f)(e,e.resolution)}));n.count=function(e){return e.reduce((function(e,n){return e+Math.max(n.length,0)}),0)}(o);var i=n.geometry.attributes,s=i.currPoint,l=i.nextPoint,c=i.segmentColor,u=0,h=0;o.forEach((function(e){e.forEach((function(n,o){var r=o===e.length-1?n:e[o+1],i=n[0],a=n[1],d=n[2],p=n[3],f=n[4],v=r[0],m=r[1];s.array[u]=t(i),s.array[u+1]=a,l.array[u]=t(v),l.array[u+1]=m,c.array[h]=d,c.array[h+1]=p,c.array[h+2]=f,h+=3,u+=2}))})),s.needsUpdate=!0,l.needsUpdate=!0,c.needsUpdate=!0},d=[[0,-.5],[1,-.5],[1,.5],[0,-.5],[1,.5],[0,.5]],p=function(e){var n=e.viewPort,t=e.dataStreams,r=e.chartSize,s=e.minBufferSize,p=e.bufferFactor,f=e.toClipSpace,v=e.thresholdOptions,m=e.thresholds,g=new o.c,y=Math.max(s,Object(a.e)(t)*p);!function(e,n){e.setAttribute("position",new o.i(new Float32Array(d.flat()),2)),e.setAttribute("currPoint",new o.k(new Float32Array(2*n),2,!1)),e.setAttribute("nextPoint",new o.k(new Float32Array(2*n),2,!1)),e.setAttribute("segmentColor",new o.k(new Uint8Array(3*n),3,!0))}(g,y);var b=u({viewPort:n,toClipSpace:f,size:r}),x=b.x,w=b.y,P=v.showColor,S=void 0===P||P,C=new o.f({vertexShader:l(S&&m.length>0),fragmentShader:S&&0!==m.length?c:"\nprecision highp float;\nvarying vec3 vColor;\n\n// Fills in triangles which make up a line segment, with the corresponding color\nvoid main() {\n  gl_FragColor = vec4(vColor, 1.0);\n}\n",side:o.b,transparent:!0,uniforms:{width:{value:1.5},xPixelDensity:{value:x},yPixelDensity:{value:w},thresholdBands:{value:Object(i.e)(m)}}}),O=new o.j(g,C,y);return O.frustumCulled=!1,h(t,O,f),O},f=function(e){var n=e.dataStreams,t=e.chartSize,r=e.container,l=e.viewPort,c=e.minBufferSize,u=e.bufferFactor,h=e.onUpdate,d=e.thresholdOptions,f=e.thresholds,v=new o.l,m=Object(a.a)(l),g=Object(s.g)(f),y=[];return y[1]=p({toClipSpace:m,chartSize:t,dataStreams:n,viewPort:l,minBufferSize:c,bufferFactor:u,thresholdOptions:d,thresholds:g}),y[i.c]=Object(i.d)({dataStreams:n,minBufferSize:c,bufferFactor:u,toClipSpace:m,thresholdOptions:d,thresholds:g}),y.forEach((function(e){return v.add(e)})),Object(a.c)({scene:v,viewPort:l,container:r,toClipSpace:m,onUpdate:h})},v=function(e){var n=e.scene,t=e.dataStreams,o=e.chartSize,r=e.container,s=e.viewPort,l=e.hasDataChanged,c=e.bufferFactor,d=e.minBufferSize,p=e.onUpdate,v=e.thresholdOptions,m=e.hasAnnotationChanged,g=e.thresholds,y=n.scene.children[1],b=n.scene.children[i.c];return function(e){return e.geometry.attributes.position.array.length/i.b}(b)<Object(a.e)(t)||Object(a.b)(s,n.toClipSpace)||m?f({dataStreams:t,chartSize:o,container:r,viewPort:s,minBufferSize:d,bufferFactor:c,onUpdate:p,thresholdOptions:v,thresholds:g}):(function(e){var n=e.chartSize,t=e.toClipSpace,o=e.lines,r=e.dataStreams,i=e.viewPort,a=e.hasDataChanged,s=u({viewPort:i,toClipSpace:t,size:n}),l=s.x,c=s.y;o.material.uniforms.xPixelDensity.value=l,o.material.uniforms.yPixelDensity.value=c,a&&h(r,o,t)}({lines:y,dataStreams:t,chartSize:o,viewPort:s,hasDataChanged:l,toClipSpace:n.toClipSpace}),Object(i.f)(t,b,n.toClipSpace,l),n)}},1178:function(e,n,t){"use strict";t.d(n,"a",(function(){return f})),t.d(n,"b",(function(){return v}));var o=t(1150),r=t(1146),i=t(1162),a=t(1152),s=t(1148),l=function(e){return"\nprecision highp float;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float width;\nuniform float xPixelDensity;\nuniform float yPixelDensity;\nattribute vec2 currPoint;\nattribute vec2 nextPoint;\nattribute vec2 position;\nattribute vec3 segmentColor;\nvarying vec3 vColor;\n"+(e?"varying float yPositionPx;":"")+"\n\n// line shader using instanced lines\n// https://wwwtyro.net/2019/11/18/instanced-lines.html for information on this approach\nvoid main() {\n  // Convert the points to pixel coordinates - otherwise out basis vectors won't be perpendicular when\n  // rasterized to the screen.\n  vec2 currPointPx = vec2(currPoint.x / xPixelDensity, currPoint.y / yPixelDensity);\n  vec2 nextPointPx = vec2(nextPoint.x / xPixelDensity, nextPoint.y / yPixelDensity);\n\n  // create the basis vectors of a coordinate space where the x axis is parallel with\n  // the path between currPoint and nextPoint, and the y axis is perpendicular to the\n  // path between currPoint and nextPoint\n  vec2 xBasis = nextPointPx - currPointPx;\n  vec2 yBasis = normalize(vec2(-xBasis.y, xBasis.x));\n\n  // project the instance segment along the basis vectors\n  vec2 positionPx = currPointPx + xBasis * position.x + yBasis * width * position.y;\n\n  // Convert from pixel coordinates back to model space\n  vec2 positionModel = vec2(positionPx.x * xPixelDensity, positionPx.y * yPixelDensity);\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(positionModel, 0.0, 1.0);\n  vColor = segmentColor;\n  "+(e?"yPositionPx = positionPx.y;":"")+"\n}\n"},c="\n// This file is only being used when we have threshold bands\n// that will break the line segments into different color\n#define MAX_NUM_TOTAL_THRESHOLD_BAND "+i.a+"\n\nprecision highp float;\nstruct Band {\n  float upper;\n  float lower;\n  vec3 color;\n};\n\nvarying vec3 vColor;\nvarying float yPositionPx;\nuniform float yPixelDensity;\nuniform Band thresholdBands[MAX_NUM_TOTAL_THRESHOLD_BAND];\n\n// Fills in triangles which make up a line segment, with the corresponding color\nvoid main() {\n  for(int i = 0; i < MAX_NUM_TOTAL_THRESHOLD_BAND; i++) {\n    bool isRangeBreached = yPositionPx > thresholdBands[i].lower / yPixelDensity\n      && yPositionPx < thresholdBands[i].upper / yPixelDensity;\n    bool isEqualsThreshold = thresholdBands[i].lower == thresholdBands[i].upper;\n    bool isEqualsThresholdBreached = yPositionPx == thresholdBands[i].upper;\n\n    if (isRangeBreached || (isEqualsThreshold && isEqualsThresholdBreached)) {\n       gl_FragColor = vec4(thresholdBands[i].color / 255.0, 1.0);\n       break;\n    } else {\n       gl_FragColor = vec4(vColor, 1.0);\n    }\n  }\n}\n",u=function(e){var n=e.viewPort,t=n.end,o=n.start,r=n.yMax,i=n.yMin,a=e.toClipSpace,s=e.size,l=s.width,c=s.height;return{x:Math.abs((a(t.getTime())-a(o.getTime()))/l),y:Math.abs((r-i)/c)}},h=function(e,n,t){var o=e.filter(r.a).map((function(e){return Object(a.f)(e,e.resolution)}));n.count=function(e){return e.reduce((function(e,n){return e+Math.max(n.length,0)}),0)}(o);var i=n.geometry.attributes,s=i.currPoint,l=i.nextPoint,c=i.segmentColor,u=0,h=0;o.forEach((function(e){e.forEach((function(n,o){var r=o===e.length-1?n:e[o+1],i=n[0],a=n[1],d=n[2],p=n[3],f=n[4],v=r[0],m=r[1];s.array[u]=t(i),s.array[u+1]=a,l.array[u]=t(v),l.array[u+1]=m,c.array[h]=d,c.array[h+1]=p,c.array[h+2]=f,h+=3,u+=2}))})),s.needsUpdate=!0,l.needsUpdate=!0,c.needsUpdate=!0},d=[[0,-.5],[1,-.5],[1,.5],[0,-.5],[1,.5],[0,.5]],p=function(e){var n=e.viewPort,t=e.dataStreams,r=e.chartSize,s=e.minBufferSize,p=e.bufferFactor,f=e.toClipSpace,v=e.thresholdOptions,m=e.thresholds,g=new o.c,y=Math.max(s,Object(a.e)(t)*p);!function(e,n){e.setAttribute("position",new o.i(new Float32Array(d.flat()),2)),e.setAttribute("currPoint",new o.k(new Float32Array(2*n),2,!1)),e.setAttribute("nextPoint",new o.k(new Float32Array(2*n),2,!1)),e.setAttribute("segmentColor",new o.k(new Uint8Array(3*n),3,!0))}(g,y);var b=u({viewPort:n,toClipSpace:f,size:r}),x=b.x,w=b.y,P=v.showColor,S=void 0===P||P,C=new o.f({vertexShader:l(S&&m.length>0),fragmentShader:S&&0!==m.length?c:"\nprecision highp float;\nvarying vec3 vColor;\n\n// Fills in triangles which make up a line segment, with the corresponding color\nvoid main() {\n  gl_FragColor = vec4(vColor, 1.0);\n}\n",side:o.b,transparent:!0,uniforms:{width:{value:1.5},xPixelDensity:{value:x},yPixelDensity:{value:w},thresholdBands:{value:Object(i.e)(m)}}}),O=new o.j(g,C,y);return O.frustumCulled=!1,h(t,O,f),O},f=function(e){var n=e.dataStreams,t=e.chartSize,r=e.container,l=e.viewPort,c=e.minBufferSize,u=e.bufferFactor,h=e.onUpdate,d=e.thresholdOptions,f=e.thresholds,v=new o.l,m=Object(a.a)(l),g=Object(s.g)(f),y=[];return y[1]=p({toClipSpace:m,chartSize:t,dataStreams:n,viewPort:l,minBufferSize:c,bufferFactor:u,thresholdOptions:d,thresholds:g}),y[i.c]=Object(i.d)({dataStreams:n,minBufferSize:c,bufferFactor:u,toClipSpace:m,thresholdOptions:d,thresholds:g}),y.forEach((function(e){return v.add(e)})),Object(a.c)({scene:v,viewPort:l,container:r,toClipSpace:m,onUpdate:h})},v=function(e){var n=e.scene,t=e.dataStreams,o=e.chartSize,r=e.container,s=e.viewPort,l=e.hasDataChanged,c=e.bufferFactor,d=e.minBufferSize,p=e.onUpdate,v=e.thresholdOptions,m=e.hasAnnotationChanged,g=e.thresholds,y=n.scene.children[1],b=n.scene.children[i.c];return function(e){return e.geometry.attributes.position.array.length/i.b}(b)<Object(a.e)(t)||Object(a.b)(s,n.toClipSpace)||m?f({dataStreams:t,chartSize:o,container:r,viewPort:s,minBufferSize:d,bufferFactor:c,onUpdate:p,thresholdOptions:v,thresholds:g}):(function(e){var n=e.chartSize,t=e.toClipSpace,o=e.lines,r=e.dataStreams,i=e.viewPort,a=e.hasDataChanged,s=u({viewPort:i,toClipSpace:t,size:n}),l=s.x,c=s.y;o.material.uniforms.xPixelDensity.value=l,o.material.uniforms.yPixelDensity.value=c,a&&h(r,o,t)}({lines:y,dataStreams:t,chartSize:o,viewPort:s,hasDataChanged:l,toClipSpace:n.toClipSpace}),Object(i.f)(t,b,n.toClipSpace,l),n)}},873:function(e,n,t){"use strict";t.r(n),t.d(n,"monitor_angled_line_segment",(function(){return p}));var o=t(63),r=t(1137),i=(t(1142),t(1139),t(1140),t(1138),t(1141),t(1143),t(1149),t(1171)),a=(t(1144),t(1161),t(1166),t(1167),t(1157),t(1151),t(1159),t(1153),t(1147),t(1175)),s=t(1179),l=new Date(2e3,0,0),c=new Date(2e3,0,1),u=c.getTime()-l.getTime(),h={x:l.getTime()+u/3,y:0+100/3},d={x:l.getTime()+u*(2/3),y:0+2/3*100},p=function(){function e(e){Object(o.i)(this,e)}return e.prototype.componentDidLoad=function(){var e=this.el.querySelector("#test-container"),n=Object(a.a)({viewPort:{start:l,end:c,yMin:0,yMax:100},dataStreams:[{id:"test-stream",name:"test-stream-name",color:"black",data:[h,d],resolution:0,dataType:r.a.NUMBER}],container:e,minBufferSize:100,bufferFactor:2,chartSize:s.a,thresholdOptions:{showColor:!1},thresholds:[]});i.b.addChartScene(n);var t=e.getBoundingClientRect();i.b.setChartRect(n.id,Object.assign({density:1},t.toJSON()))},e.prototype.render=function(){return Object(o.h)("monitor-webgl-context",null,Object(o.h)("div",{id:"test-container",style:{width:s.a.width+"px",height:s.a.height+"px"}}))},Object.defineProperty(e.prototype,"el",{get:function(){return Object(o.g)(this)},enumerable:!0,configurable:!0}),e}()}}]);