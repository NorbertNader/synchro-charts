(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{1100:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return p})),t.d(n,"c",(function(){return u})),t.d(n,"d",(function(){return v})),t.d(n,"e",(function(){return c})),t.d(n,"f",(function(){return m}));var o=t(54),r=t(1077),i=t(1075),a=t(1087),s=function(e){return"\nvarying vec3 vColor;\n"+(e?"varying float positionY;":"")+"\nattribute vec3 pointColor;\nuniform float pointDiameter;\nuniform float devicePixelRatio;\n\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position.x, position.y, 0.0, 1.0);\n  gl_PointSize = pointDiameter * devicePixelRatio;\n  vColor = pointColor;\n  "+(e?"positionY = position.y;":"")+"\n}\n"},l=12,c=function(e){if(0===e.length)return[];var n=Object(i.g)(e),t=Object(i.s)(n).reverse(),r=[],s=new Set;t.forEach((function(e,n){var l=e.value;if(t[n].comparisonOperator!==o.a.EQUAL)if(0!==n){var c=t[n-1],h=c.value,u=(h+l)/2,d=Object(i.a)(u,t);if(null!=d&&!s.has(c.value)){var p=Object(a.d)(d.color);b=p[0],P=p[1],w=p[2],c.comparisonOperator===o.a.EQUAL&&(c.value,t[n].value),r.push({upper:h,lower:l,color:[b,P,w]}),s.add(c.value)}if(n!==t.length-1){var f=t[n+1].value;if(u=(l+f)/2,null!=(d=Object(i.a)(u,t))&&!s.has(l)){var v=Object(a.d)(d.color);b=v[0],P=v[1],w=v[2],r.push({upper:l,lower:f,color:[b,P,w]}),s.add(e.value)}}else if(u=(l+Number.MIN_SAFE_INTEGER)/2,null!=(d=Object(i.a)(u,t))&&!s.has(l)){var m=Object(a.d)(d.color);b=m[0],P=m[1],w=m[2],r.push({lower:Number.MIN_SAFE_INTEGER,upper:l,color:[b,P,w]})}}else{var x=(Number.MAX_SAFE_INTEGER+l)/2,g=Object(i.a)(x,t);if(null!=g){var y=Object(a.d)(g.color),b=y[0],P=y[1],w=y[2];r.push({upper:Number.MAX_SAFE_INTEGER,lower:l,color:[b,P,w]})}}else{var S=Object(a.d)(t[n].color);b=S[0],P=S[1],w=S[2];r.push({upper:l,lower:l,color:[b,P,w]})}}));for(var c=r[r.length-1];r.length<l;){var h=t[t.length-1].value,u=Number.MIN_SAFE_INTEGER+h/2,d=Object(i.a)(u,t);if(null==d)r.push(c);else{var p=Object(a.d)(d.color),f=p[0],v=p[1],m=p[2];c={lower:Number.MIN_SAFE_INTEGER,upper:h,color:[f,v,m]},r.push(c)}}return r},h="\n#define MAX_NUM_TOTAL_THRESHOLD_BAND "+l+"\n\nstruct Band {\n  float upper;\n  float lower;\n  vec3 color;\n};\n\nvarying vec3 vColor;\nvarying float positionY;\n\nuniform Band thresholdBands[MAX_NUM_TOTAL_THRESHOLD_BAND];\nuniform float yPixelDensity;\n\nvoid main() {\n  // calculate position such that the center is (0, 0) in a region of [-1, 1] x [-1, 1]\n  vec2 pos = 2.0 * gl_PointCoord.xy - 1.0;\n  // r = distance squared from the origin of the point being rendered\n  float r = dot(pos, pos);\n  if (r > 1.0) {\n    discard;\n  }\n  float alpha = 1.0 - smoothstep(0.5, 1.0, sqrt(r));\n\n  for(int i = 0; i < MAX_NUM_TOTAL_THRESHOLD_BAND; i++) {\n    bool isRangeBreached = positionY >= thresholdBands[i].lower && positionY <= thresholdBands[i].upper;\n    bool isEqualsThreshold = thresholdBands[i].lower == thresholdBands[i].upper;\n    bool isEqualsThresholdBreached = positionY == thresholdBands[i].upper;\n\n    if (isRangeBreached || (isEqualsThreshold && isEqualsThresholdBreached)) {\n       gl_FragColor = vec4(thresholdBands[i].color /255.0, alpha);\n       break;\n    } else {\n       gl_FragColor = vec4(vColor, alpha);\n    }\n  }\n}\n",u=0,d=function(e){return 0===(null!=e[0]?e[0].resolution:null)?4:6.25},p=2,f=function(e,n,t){var o=n.filter(i.b).map((function(e){return Object(a.f)(e,e.resolution)})).flat(),r=e.attributes,s=r.position,l=r.pointColor;o.forEach((function(e,n){var o=e[0],r=e[1],i=e[2],a=e[3],c=e[4];s.array[n*p]=t(o),s.array[n*p+1]=r,l.array[3*n]=i,l.array[3*n+1]=a,l.array[3*n+2]=c})),e.setDrawRange(0,o.length),s.needsUpdate=!0,l.needsUpdate=!0},v=function(e){var n=e.toClipSpace,t=e.dataStreams,o=e.minBufferSize,i=e.bufferFactor,l=e.thresholdOptions,u=e.thresholds,v=Math.max(o,Object(a.e)(t)*i),m=new r.a;!function(e,n){e.setAttribute("position",new r.i(new Float32Array(n*p),p)),e.setAttribute("pointColor",new r.i(new Uint8Array(3*n),3,!0))}(m,v),f(m,t,n);var x=l.showColor,g=void 0===x||x,y=new r.g({vertexShader:s(g&&u.length>0),fragmentShader:g&&0!==u.length?h:"\nvarying vec3 vColor;\n\nvoid main() {\n  // calculate position such that the center is (0, 0) in a region of [-1, 1] x [-1, 1]\n  vec2 pos = 2.0 * gl_PointCoord.xy - 1.0;\n  // r = distance squared from the origin of the point being rendered\n  float r = dot(pos, pos);\n  if (r > 1.0) {\n    discard;\n  }\n  float alpha = 1.0 - smoothstep(0.5, 1.0, sqrt(r));\n  gl_FragColor = vec4(vColor, alpha);\n}\n",transparent:!0,uniforms:{pointDiameter:{value:d(t)},devicePixelRatio:{value:window.devicePixelRatio},thresholdBands:{value:c(u)}}}),b=new r.e(m,y);return b.frustumCulled=!1,b},m=function(e,n,t,o){void 0===o&&(o=!0),n.material.uniforms.pointDiameter.value=d(e),n.material.uniforms.devicePixelRatio.value=window.devicePixelRatio,o&&f(n.geometry,e,t)}},1103:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return p})),t.d(n,"c",(function(){return u})),t.d(n,"d",(function(){return v})),t.d(n,"e",(function(){return c})),t.d(n,"f",(function(){return m}));var o=t(1072),r=t(1078),i=t(1076),a=t(1088),s=function(e){return"\nvarying vec3 vColor;\n"+(e?"varying float positionY;":"")+"\nattribute vec3 pointColor;\nuniform float pointDiameter;\nuniform float devicePixelRatio;\n\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position.x, position.y, 0.0, 1.0);\n  gl_PointSize = pointDiameter * devicePixelRatio;\n  vColor = pointColor;\n  "+(e?"positionY = position.y;":"")+"\n}\n"},l=12,c=function(e){if(0===e.length)return[];var n=Object(i.g)(e),t=Object(i.s)(n).reverse(),r=[],s=new Set;t.forEach((function(e,n){var l=e.value;if(t[n].comparisonOperator!==o.a.EQUAL)if(0!==n){var c=t[n-1],h=c.value,u=(h+l)/2,d=Object(i.a)(u,t);if(null!=d&&!s.has(c.value)){var p=Object(a.d)(d.color);b=p[0],P=p[1],w=p[2],c.comparisonOperator===o.a.EQUAL&&(c.value,t[n].value),r.push({upper:h,lower:l,color:[b,P,w]}),s.add(c.value)}if(n!==t.length-1){var f=t[n+1].value;if(u=(l+f)/2,null!=(d=Object(i.a)(u,t))&&!s.has(l)){var v=Object(a.d)(d.color);b=v[0],P=v[1],w=v[2],r.push({upper:l,lower:f,color:[b,P,w]}),s.add(e.value)}}else if(u=(l+Number.MIN_SAFE_INTEGER)/2,null!=(d=Object(i.a)(u,t))&&!s.has(l)){var m=Object(a.d)(d.color);b=m[0],P=m[1],w=m[2],r.push({lower:Number.MIN_SAFE_INTEGER,upper:l,color:[b,P,w]})}}else{var x=(Number.MAX_SAFE_INTEGER+l)/2,g=Object(i.a)(x,t);if(null!=g){var y=Object(a.d)(g.color),b=y[0],P=y[1],w=y[2];r.push({upper:Number.MAX_SAFE_INTEGER,lower:l,color:[b,P,w]})}}else{var S=Object(a.d)(t[n].color);b=S[0],P=S[1],w=S[2];r.push({upper:l,lower:l,color:[b,P,w]})}}));for(var c=r[r.length-1];r.length<l;){var h=t[t.length-1].value,u=Number.MIN_SAFE_INTEGER+h/2,d=Object(i.a)(u,t);if(null==d)r.push(c);else{var p=Object(a.d)(d.color),f=p[0],v=p[1],m=p[2];c={lower:Number.MIN_SAFE_INTEGER,upper:h,color:[f,v,m]},r.push(c)}}return r},h="\n#define MAX_NUM_TOTAL_THRESHOLD_BAND "+l+"\n\nstruct Band {\n  float upper;\n  float lower;\n  vec3 color;\n};\n\nvarying vec3 vColor;\nvarying float positionY;\n\nuniform Band thresholdBands[MAX_NUM_TOTAL_THRESHOLD_BAND];\nuniform float yPixelDensity;\n\nvoid main() {\n  // calculate position such that the center is (0, 0) in a region of [-1, 1] x [-1, 1]\n  vec2 pos = 2.0 * gl_PointCoord.xy - 1.0;\n  // r = distance squared from the origin of the point being rendered\n  float r = dot(pos, pos);\n  if (r > 1.0) {\n    discard;\n  }\n  float alpha = 1.0 - smoothstep(0.5, 1.0, sqrt(r));\n\n  for(int i = 0; i < MAX_NUM_TOTAL_THRESHOLD_BAND; i++) {\n    bool isRangeBreached = positionY >= thresholdBands[i].lower && positionY <= thresholdBands[i].upper;\n    bool isEqualsThreshold = thresholdBands[i].lower == thresholdBands[i].upper;\n    bool isEqualsThresholdBreached = positionY == thresholdBands[i].upper;\n\n    if (isRangeBreached || (isEqualsThreshold && isEqualsThresholdBreached)) {\n       gl_FragColor = vec4(thresholdBands[i].color /255.0, alpha);\n       break;\n    } else {\n       gl_FragColor = vec4(vColor, alpha);\n    }\n  }\n}\n",u=0,d=function(e){return 0===(null!=e[0]?e[0].resolution:null)?4:6.25},p=2,f=function(e,n,t){var o=n.filter(i.b).map((function(e){return Object(a.f)(e,e.resolution)})).flat(),r=e.attributes,s=r.position,l=r.pointColor;o.forEach((function(e,n){var o=e[0],r=e[1],i=e[2],a=e[3],c=e[4];s.array[n*p]=t(o),s.array[n*p+1]=r,l.array[3*n]=i,l.array[3*n+1]=a,l.array[3*n+2]=c})),e.setDrawRange(0,o.length),s.needsUpdate=!0,l.needsUpdate=!0},v=function(e){var n=e.toClipSpace,t=e.dataStreams,o=e.minBufferSize,i=e.bufferFactor,l=e.thresholdOptions,u=e.thresholds,v=Math.max(o,Object(a.e)(t)*i),m=new r.a;!function(e,n){e.setAttribute("position",new r.i(new Float32Array(n*p),p)),e.setAttribute("pointColor",new r.i(new Uint8Array(3*n),3,!0))}(m,v),f(m,t,n);var x=l.showColor,g=void 0===x||x,y=new r.g({vertexShader:s(g&&u.length>0),fragmentShader:g&&0!==u.length?h:"\nvarying vec3 vColor;\n\nvoid main() {\n  // calculate position such that the center is (0, 0) in a region of [-1, 1] x [-1, 1]\n  vec2 pos = 2.0 * gl_PointCoord.xy - 1.0;\n  // r = distance squared from the origin of the point being rendered\n  float r = dot(pos, pos);\n  if (r > 1.0) {\n    discard;\n  }\n  float alpha = 1.0 - smoothstep(0.5, 1.0, sqrt(r));\n  gl_FragColor = vec4(vColor, alpha);\n}\n",transparent:!0,uniforms:{pointDiameter:{value:d(t)},devicePixelRatio:{value:window.devicePixelRatio},thresholdBands:{value:c(u)}}}),b=new r.e(m,y);return b.frustumCulled=!1,b},m=function(e,n,t,o){void 0===o&&(o=!0),n.material.uniforms.pointDiameter.value=d(e),n.material.uniforms.devicePixelRatio.value=window.devicePixelRatio,o&&f(n.geometry,e,t)}},1107:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var o=t(1077),r=t(1075),i=t(1100),a=t(1087),s=function(e){return"\nprecision highp float;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float width;\nuniform float xPixelDensity;\nuniform float yPixelDensity;\nattribute vec2 currPoint;\nattribute vec2 nextPoint;\nattribute vec2 position;\nattribute vec3 segmentColor;\nvarying vec3 vColor;\n"+(e?"varying float yPositionPx;":"")+"\n\n// line shader using instanced lines\n// https://wwwtyro.net/2019/11/18/instanced-lines.html for information on this approach\nvoid main() {\n  // Convert the points to pixel coordinates - otherwise out basis vectors won't be perpendicular when\n  // rasterized to the screen.\n  vec2 currPointPx = vec2(currPoint.x / xPixelDensity, currPoint.y / yPixelDensity);\n  vec2 nextPointPx = vec2(nextPoint.x / xPixelDensity, nextPoint.y / yPixelDensity);\n\n  // create the basis vectors of a coordinate space where the x axis is parallel with\n  // the path between currPoint and nextPoint, and the y axis is perpendicular to the\n  // path between currPoint and nextPoint\n  vec2 xBasis = nextPointPx - currPointPx;\n  vec2 yBasis = normalize(vec2(-xBasis.y, xBasis.x));\n\n  // project the instance segment along the basis vectors\n  vec2 positionPx = currPointPx + xBasis * position.x + yBasis * width * position.y;\n\n  // Convert from pixel coordinates back to model space\n  vec2 positionModel = vec2(positionPx.x * xPixelDensity, positionPx.y * yPixelDensity);\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(positionModel, 0.0, 1.0);\n  vColor = segmentColor;\n  "+(e?"yPositionPx = positionPx.y;":"")+"\n}\n"},l="\n// This file is only being used when we have threshold bands\n// that will break the line segments into different color\n#define MAX_NUM_TOTAL_THRESHOLD_BAND "+i.a+"\n\nprecision highp float;\nstruct Band {\n  float upper;\n  float lower;\n  vec3 color;\n};\n\nvarying vec3 vColor;\nvarying float yPositionPx;\nuniform float yPixelDensity;\nuniform Band thresholdBands[MAX_NUM_TOTAL_THRESHOLD_BAND];\n\n// Fills in triangles which make up a line segment, with the corresponding color\nvoid main() {\n  for(int i = 0; i < MAX_NUM_TOTAL_THRESHOLD_BAND; i++) {\n    bool isRangeBreached = yPositionPx > thresholdBands[i].lower / yPixelDensity\n      && yPositionPx < thresholdBands[i].upper / yPixelDensity;\n    bool isEqualsThreshold = thresholdBands[i].lower == thresholdBands[i].upper;\n    bool isEqualsThresholdBreached = yPositionPx == thresholdBands[i].upper;\n\n    if (isRangeBreached || (isEqualsThreshold && isEqualsThresholdBreached)) {\n       gl_FragColor = vec4(thresholdBands[i].color / 255.0, 1.0);\n       break;\n    } else {\n       gl_FragColor = vec4(vColor, 1.0);\n    }\n  }\n}\n",c=function(e){var n=e.viewPort,t=n.end,o=n.start,r=n.yMax,i=n.yMin,a=e.toClipSpace,s=e.size,l=s.width,c=s.height;return{x:Math.abs((a(t.getTime())-a(o.getTime()))/l),y:Math.abs((r-i)/c)}},h=function(e,n,t){var o=e.filter(r.b).map((function(e){return Object(a.f)(e,e.resolution)}));n.count=function(e){return e.reduce((function(e,n){return e+Math.max(n.length,0)}),0)}(o);var i=n.geometry.attributes,s=i.currPoint,l=i.nextPoint,c=i.segmentColor,h=0,u=0;o.forEach((function(e){e.forEach((function(n,o){var r=o===e.length-1?n:e[o+1],i=n[0],a=n[1],d=n[2],p=n[3],f=n[4],v=r[0],m=r[1];s.array[h]=t(i),s.array[h+1]=a,l.array[h]=t(v),l.array[h+1]=m,c.array[u]=d,c.array[u+1]=p,c.array[u+2]=f,u+=3,h+=2}))})),s.needsUpdate=!0,l.needsUpdate=!0,c.needsUpdate=!0},u=[[0,-.5],[1,-.5],[1,.5],[0,-.5],[1,.5],[0,.5]],d=function(e){var n=e.viewPort,t=e.dataStreams,r=e.chartSize,d=e.minBufferSize,p=e.bufferFactor,f=e.toClipSpace,v=e.thresholdOptions,m=e.thresholds,x=new o.c,g=Math.max(d,Object(a.e)(t)*p);!function(e,n){e.setAttribute("position",new o.i(new Float32Array(u.flat()),2)),e.setAttribute("currPoint",new o.k(new Float32Array(2*n),2,!1)),e.setAttribute("nextPoint",new o.k(new Float32Array(2*n),2,!1)),e.setAttribute("segmentColor",new o.k(new Uint8Array(3*n),3,!0))}(x,g);var y=c({viewPort:n,toClipSpace:f,size:r}),b=y.x,P=y.y,w=v.showColor,S=void 0===w||w,C=new o.f({vertexShader:s(S&&m.length>0),fragmentShader:S&&0!==m.length?l:"\nprecision highp float;\nvarying vec3 vColor;\n\n// Fills in triangles which make up a line segment, with the corresponding color\nvoid main() {\n  gl_FragColor = vec4(vColor, 1.0);\n}\n",side:o.b,transparent:!0,uniforms:{width:{value:1.5},xPixelDensity:{value:b},yPixelDensity:{value:P},thresholdBands:{value:Object(i.e)(m)}}}),B=new o.j(x,C,g);return B.frustumCulled=!1,h(t,B,f),B},p=function(e){var n=e.dataStreams,t=e.chartSize,s=e.container,l=e.viewPort,c=e.minBufferSize,h=e.bufferFactor,u=e.onUpdate,p=e.thresholdOptions,f=e.thresholds,v=new o.l,m=Object(a.a)(l),x=Object(r.g)(f),g=[];return g[1]=d({toClipSpace:m,chartSize:t,dataStreams:n,viewPort:l,minBufferSize:c,bufferFactor:h,thresholdOptions:p,thresholds:x}),g[i.c]=Object(i.d)({dataStreams:n,minBufferSize:c,bufferFactor:h,toClipSpace:m,thresholdOptions:p,thresholds:x}),g.forEach((function(e){return v.add(e)})),Object(a.c)({scene:v,viewPort:l,container:s,toClipSpace:m,onUpdate:u})},f=function(e){var n=e.scene,t=e.dataStreams,o=e.chartSize,r=e.container,s=e.viewPort,l=e.hasDataChanged,u=e.bufferFactor,d=e.minBufferSize,f=e.onUpdate,v=e.thresholdOptions,m=e.hasAnnotationChanged,x=e.thresholds,g=n.scene.children[1],y=n.scene.children[i.c];return function(e){return e.geometry.attributes.position.array.length/i.b}(y)<Object(a.e)(t)||Object(a.b)(s,n.toClipSpace)||m?p({dataStreams:t,chartSize:o,container:r,viewPort:s,minBufferSize:d,bufferFactor:u,onUpdate:f,thresholdOptions:v,thresholds:x}):(function(e){var n=e.chartSize,t=e.toClipSpace,o=e.lines,r=e.dataStreams,i=e.viewPort,a=e.hasDataChanged,s=c({viewPort:i,toClipSpace:t,size:n}),l=s.x,u=s.y;o.material.uniforms.xPixelDensity.value=l,o.material.uniforms.yPixelDensity.value=u,a&&h(r,o,t)}({lines:g,dataStreams:t,chartSize:o,viewPort:s,hasDataChanged:l,toClipSpace:n.toClipSpace}),Object(i.f)(t,y,n.toClipSpace,l),n)}},1109:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var o=t(1078),r=t(1076),i=t(1103),a=t(1088),s=function(e){return"\nprecision highp float;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float width;\nuniform float xPixelDensity;\nuniform float yPixelDensity;\nattribute vec2 currPoint;\nattribute vec2 nextPoint;\nattribute vec2 position;\nattribute vec3 segmentColor;\nvarying vec3 vColor;\n"+(e?"varying float yPositionPx;":"")+"\n\n// line shader using instanced lines\n// https://wwwtyro.net/2019/11/18/instanced-lines.html for information on this approach\nvoid main() {\n  // Convert the points to pixel coordinates - otherwise out basis vectors won't be perpendicular when\n  // rasterized to the screen.\n  vec2 currPointPx = vec2(currPoint.x / xPixelDensity, currPoint.y / yPixelDensity);\n  vec2 nextPointPx = vec2(nextPoint.x / xPixelDensity, nextPoint.y / yPixelDensity);\n\n  // create the basis vectors of a coordinate space where the x axis is parallel with\n  // the path between currPoint and nextPoint, and the y axis is perpendicular to the\n  // path between currPoint and nextPoint\n  vec2 xBasis = nextPointPx - currPointPx;\n  vec2 yBasis = normalize(vec2(-xBasis.y, xBasis.x));\n\n  // project the instance segment along the basis vectors\n  vec2 positionPx = currPointPx + xBasis * position.x + yBasis * width * position.y;\n\n  // Convert from pixel coordinates back to model space\n  vec2 positionModel = vec2(positionPx.x * xPixelDensity, positionPx.y * yPixelDensity);\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(positionModel, 0.0, 1.0);\n  vColor = segmentColor;\n  "+(e?"yPositionPx = positionPx.y;":"")+"\n}\n"},l="\n// This file is only being used when we have threshold bands\n// that will break the line segments into different color\n#define MAX_NUM_TOTAL_THRESHOLD_BAND "+i.a+"\n\nprecision highp float;\nstruct Band {\n  float upper;\n  float lower;\n  vec3 color;\n};\n\nvarying vec3 vColor;\nvarying float yPositionPx;\nuniform float yPixelDensity;\nuniform Band thresholdBands[MAX_NUM_TOTAL_THRESHOLD_BAND];\n\n// Fills in triangles which make up a line segment, with the corresponding color\nvoid main() {\n  for(int i = 0; i < MAX_NUM_TOTAL_THRESHOLD_BAND; i++) {\n    bool isRangeBreached = yPositionPx > thresholdBands[i].lower / yPixelDensity\n      && yPositionPx < thresholdBands[i].upper / yPixelDensity;\n    bool isEqualsThreshold = thresholdBands[i].lower == thresholdBands[i].upper;\n    bool isEqualsThresholdBreached = yPositionPx == thresholdBands[i].upper;\n\n    if (isRangeBreached || (isEqualsThreshold && isEqualsThresholdBreached)) {\n       gl_FragColor = vec4(thresholdBands[i].color / 255.0, 1.0);\n       break;\n    } else {\n       gl_FragColor = vec4(vColor, 1.0);\n    }\n  }\n}\n",c=function(e){var n=e.viewPort,t=n.end,o=n.start,r=n.yMax,i=n.yMin,a=e.toClipSpace,s=e.size,l=s.width,c=s.height;return{x:Math.abs((a(t.getTime())-a(o.getTime()))/l),y:Math.abs((r-i)/c)}},h=function(e,n,t){var o=e.filter(r.b).map((function(e){return Object(a.f)(e,e.resolution)}));n.count=function(e){return e.reduce((function(e,n){return e+Math.max(n.length,0)}),0)}(o);var i=n.geometry.attributes,s=i.currPoint,l=i.nextPoint,c=i.segmentColor,h=0,u=0;o.forEach((function(e){e.forEach((function(n,o){var r=o===e.length-1?n:e[o+1],i=n[0],a=n[1],d=n[2],p=n[3],f=n[4],v=r[0],m=r[1];s.array[h]=t(i),s.array[h+1]=a,l.array[h]=t(v),l.array[h+1]=m,c.array[u]=d,c.array[u+1]=p,c.array[u+2]=f,u+=3,h+=2}))})),s.needsUpdate=!0,l.needsUpdate=!0,c.needsUpdate=!0},u=[[0,-.5],[1,-.5],[1,.5],[0,-.5],[1,.5],[0,.5]],d=function(e){var n=e.viewPort,t=e.dataStreams,r=e.chartSize,d=e.minBufferSize,p=e.bufferFactor,f=e.toClipSpace,v=e.thresholdOptions,m=e.thresholds,x=new o.c,g=Math.max(d,Object(a.e)(t)*p);!function(e,n){e.setAttribute("position",new o.i(new Float32Array(u.flat()),2)),e.setAttribute("currPoint",new o.k(new Float32Array(2*n),2,!1)),e.setAttribute("nextPoint",new o.k(new Float32Array(2*n),2,!1)),e.setAttribute("segmentColor",new o.k(new Uint8Array(3*n),3,!0))}(x,g);var y=c({viewPort:n,toClipSpace:f,size:r}),b=y.x,P=y.y,w=v.showColor,S=void 0===w||w,C=new o.f({vertexShader:s(S&&m.length>0),fragmentShader:S&&0!==m.length?l:"\nprecision highp float;\nvarying vec3 vColor;\n\n// Fills in triangles which make up a line segment, with the corresponding color\nvoid main() {\n  gl_FragColor = vec4(vColor, 1.0);\n}\n",side:o.b,transparent:!0,uniforms:{width:{value:1.5},xPixelDensity:{value:b},yPixelDensity:{value:P},thresholdBands:{value:Object(i.e)(m)}}}),B=new o.j(x,C,g);return B.frustumCulled=!1,h(t,B,f),B},p=function(e){var n=e.dataStreams,t=e.chartSize,s=e.container,l=e.viewPort,c=e.minBufferSize,h=e.bufferFactor,u=e.onUpdate,p=e.thresholdOptions,f=e.thresholds,v=new o.l,m=Object(a.a)(l),x=Object(r.g)(f),g=[];return g[1]=d({toClipSpace:m,chartSize:t,dataStreams:n,viewPort:l,minBufferSize:c,bufferFactor:h,thresholdOptions:p,thresholds:x}),g[i.c]=Object(i.d)({dataStreams:n,minBufferSize:c,bufferFactor:h,toClipSpace:m,thresholdOptions:p,thresholds:x}),g.forEach((function(e){return v.add(e)})),Object(a.c)({scene:v,viewPort:l,container:s,toClipSpace:m,onUpdate:u})},f=function(e){var n=e.scene,t=e.dataStreams,o=e.chartSize,r=e.container,s=e.viewPort,l=e.hasDataChanged,u=e.bufferFactor,d=e.minBufferSize,f=e.onUpdate,v=e.thresholdOptions,m=e.hasAnnotationChanged,x=e.thresholds,g=n.scene.children[1],y=n.scene.children[i.c];return function(e){return e.geometry.attributes.position.array.length/i.b}(y)<Object(a.e)(t)||Object(a.b)(s,n.toClipSpace)||m?p({dataStreams:t,chartSize:o,container:r,viewPort:s,minBufferSize:d,bufferFactor:u,onUpdate:f,thresholdOptions:v,thresholds:x}):(function(e){var n=e.chartSize,t=e.toClipSpace,o=e.lines,r=e.dataStreams,i=e.viewPort,a=e.hasDataChanged,s=c({viewPort:i,toClipSpace:t,size:n}),l=s.x,u=s.y;o.material.uniforms.xPixelDensity.value=l,o.material.uniforms.yPixelDensity.value=u,a&&h(r,o,t)}({lines:g,dataStreams:t,chartSize:o,viewPort:s,hasDataChanged:l,toClipSpace:n.toClipSpace}),Object(i.f)(t,y,n.toClipSpace,l),n)}}}]);