(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{186:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.BarChart},187:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.KPI},188:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.LineChart},189:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.ScatterChart},190:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.StatusGrid},191:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.StatusTimeline},192:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.Table},193:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.WebglContext},207:function(n,t,e){"use strict";e(809);var a=e(1),s=e.n(a),o=e(210),r=e(208),i=(e(811),e(8));Object(o.a)(),t.a=function(n){var t=n.children;return s.a.createElement("div",{className:"section"},s.a.createElement(r.a,null,t),s.a.createElement(i.WebglContext,null))}},213:function(n,t,e){n.exports=e(844)},394:function(n,t,e){var a={"./Binary_Property/ASCII.js":395,"./Binary_Property/ASCII_Hex_Digit.js":396,"./Binary_Property/Alphabetic.js":397,"./Binary_Property/Any.js":398,"./Binary_Property/Assigned.js":399,"./Binary_Property/Bidi_Control.js":400,"./Binary_Property/Bidi_Mirrored.js":401,"./Binary_Property/Case_Ignorable.js":402,"./Binary_Property/Cased.js":403,"./Binary_Property/Changes_When_Casefolded.js":404,"./Binary_Property/Changes_When_Casemapped.js":405,"./Binary_Property/Changes_When_Lowercased.js":406,"./Binary_Property/Changes_When_NFKC_Casefolded.js":407,"./Binary_Property/Changes_When_Titlecased.js":408,"./Binary_Property/Changes_When_Uppercased.js":409,"./Binary_Property/Dash.js":410,"./Binary_Property/Default_Ignorable_Code_Point.js":411,"./Binary_Property/Deprecated.js":412,"./Binary_Property/Diacritic.js":413,"./Binary_Property/Emoji.js":414,"./Binary_Property/Emoji_Component.js":415,"./Binary_Property/Emoji_Modifier.js":416,"./Binary_Property/Emoji_Modifier_Base.js":417,"./Binary_Property/Emoji_Presentation.js":418,"./Binary_Property/Extended_Pictographic.js":419,"./Binary_Property/Extender.js":420,"./Binary_Property/Grapheme_Base.js":421,"./Binary_Property/Grapheme_Extend.js":422,"./Binary_Property/Hex_Digit.js":423,"./Binary_Property/IDS_Binary_Operator.js":424,"./Binary_Property/IDS_Trinary_Operator.js":425,"./Binary_Property/ID_Continue.js":426,"./Binary_Property/ID_Start.js":427,"./Binary_Property/Ideographic.js":428,"./Binary_Property/Join_Control.js":429,"./Binary_Property/Logical_Order_Exception.js":430,"./Binary_Property/Lowercase.js":431,"./Binary_Property/Math.js":432,"./Binary_Property/Noncharacter_Code_Point.js":433,"./Binary_Property/Pattern_Syntax.js":434,"./Binary_Property/Pattern_White_Space.js":435,"./Binary_Property/Quotation_Mark.js":436,"./Binary_Property/Radical.js":437,"./Binary_Property/Regional_Indicator.js":438,"./Binary_Property/Sentence_Terminal.js":439,"./Binary_Property/Soft_Dotted.js":440,"./Binary_Property/Terminal_Punctuation.js":441,"./Binary_Property/Unified_Ideograph.js":442,"./Binary_Property/Uppercase.js":443,"./Binary_Property/Variation_Selector.js":444,"./Binary_Property/White_Space.js":445,"./Binary_Property/XID_Continue.js":446,"./Binary_Property/XID_Start.js":447,"./General_Category/Cased_Letter.js":448,"./General_Category/Close_Punctuation.js":449,"./General_Category/Connector_Punctuation.js":450,"./General_Category/Control.js":451,"./General_Category/Currency_Symbol.js":452,"./General_Category/Dash_Punctuation.js":453,"./General_Category/Decimal_Number.js":454,"./General_Category/Enclosing_Mark.js":455,"./General_Category/Final_Punctuation.js":456,"./General_Category/Format.js":457,"./General_Category/Initial_Punctuation.js":458,"./General_Category/Letter.js":459,"./General_Category/Letter_Number.js":460,"./General_Category/Line_Separator.js":461,"./General_Category/Lowercase_Letter.js":462,"./General_Category/Mark.js":463,"./General_Category/Math_Symbol.js":464,"./General_Category/Modifier_Letter.js":465,"./General_Category/Modifier_Symbol.js":466,"./General_Category/Nonspacing_Mark.js":467,"./General_Category/Number.js":468,"./General_Category/Open_Punctuation.js":469,"./General_Category/Other.js":470,"./General_Category/Other_Letter.js":471,"./General_Category/Other_Number.js":472,"./General_Category/Other_Punctuation.js":473,"./General_Category/Other_Symbol.js":474,"./General_Category/Paragraph_Separator.js":475,"./General_Category/Private_Use.js":476,"./General_Category/Punctuation.js":477,"./General_Category/Separator.js":478,"./General_Category/Space_Separator.js":479,"./General_Category/Spacing_Mark.js":480,"./General_Category/Surrogate.js":481,"./General_Category/Symbol.js":482,"./General_Category/Titlecase_Letter.js":483,"./General_Category/Unassigned.js":484,"./General_Category/Uppercase_Letter.js":485,"./Script/Adlam.js":486,"./Script/Ahom.js":487,"./Script/Anatolian_Hieroglyphs.js":488,"./Script/Arabic.js":489,"./Script/Armenian.js":490,"./Script/Avestan.js":491,"./Script/Balinese.js":492,"./Script/Bamum.js":493,"./Script/Bassa_Vah.js":494,"./Script/Batak.js":495,"./Script/Bengali.js":496,"./Script/Bhaiksuki.js":497,"./Script/Bopomofo.js":498,"./Script/Brahmi.js":499,"./Script/Braille.js":500,"./Script/Buginese.js":501,"./Script/Buhid.js":502,"./Script/Canadian_Aboriginal.js":503,"./Script/Carian.js":504,"./Script/Caucasian_Albanian.js":505,"./Script/Chakma.js":506,"./Script/Cham.js":507,"./Script/Cherokee.js":508,"./Script/Chorasmian.js":509,"./Script/Common.js":510,"./Script/Coptic.js":511,"./Script/Cuneiform.js":512,"./Script/Cypriot.js":513,"./Script/Cyrillic.js":514,"./Script/Deseret.js":515,"./Script/Devanagari.js":516,"./Script/Dives_Akuru.js":517,"./Script/Dogra.js":518,"./Script/Duployan.js":519,"./Script/Egyptian_Hieroglyphs.js":520,"./Script/Elbasan.js":521,"./Script/Elymaic.js":522,"./Script/Ethiopic.js":523,"./Script/Georgian.js":524,"./Script/Glagolitic.js":525,"./Script/Gothic.js":526,"./Script/Grantha.js":527,"./Script/Greek.js":528,"./Script/Gujarati.js":529,"./Script/Gunjala_Gondi.js":530,"./Script/Gurmukhi.js":531,"./Script/Han.js":532,"./Script/Hangul.js":533,"./Script/Hanifi_Rohingya.js":534,"./Script/Hanunoo.js":535,"./Script/Hatran.js":536,"./Script/Hebrew.js":537,"./Script/Hiragana.js":538,"./Script/Imperial_Aramaic.js":539,"./Script/Inherited.js":540,"./Script/Inscriptional_Pahlavi.js":541,"./Script/Inscriptional_Parthian.js":542,"./Script/Javanese.js":543,"./Script/Kaithi.js":544,"./Script/Kannada.js":545,"./Script/Katakana.js":546,"./Script/Kayah_Li.js":547,"./Script/Kharoshthi.js":548,"./Script/Khitan_Small_Script.js":549,"./Script/Khmer.js":550,"./Script/Khojki.js":551,"./Script/Khudawadi.js":552,"./Script/Lao.js":553,"./Script/Latin.js":554,"./Script/Lepcha.js":555,"./Script/Limbu.js":556,"./Script/Linear_A.js":557,"./Script/Linear_B.js":558,"./Script/Lisu.js":559,"./Script/Lycian.js":560,"./Script/Lydian.js":561,"./Script/Mahajani.js":562,"./Script/Makasar.js":563,"./Script/Malayalam.js":564,"./Script/Mandaic.js":565,"./Script/Manichaean.js":566,"./Script/Marchen.js":567,"./Script/Masaram_Gondi.js":568,"./Script/Medefaidrin.js":569,"./Script/Meetei_Mayek.js":570,"./Script/Mende_Kikakui.js":571,"./Script/Meroitic_Cursive.js":572,"./Script/Meroitic_Hieroglyphs.js":573,"./Script/Miao.js":574,"./Script/Modi.js":575,"./Script/Mongolian.js":576,"./Script/Mro.js":577,"./Script/Multani.js":578,"./Script/Myanmar.js":579,"./Script/Nabataean.js":580,"./Script/Nandinagari.js":581,"./Script/New_Tai_Lue.js":582,"./Script/Newa.js":583,"./Script/Nko.js":584,"./Script/Nushu.js":585,"./Script/Nyiakeng_Puachue_Hmong.js":586,"./Script/Ogham.js":587,"./Script/Ol_Chiki.js":588,"./Script/Old_Hungarian.js":589,"./Script/Old_Italic.js":590,"./Script/Old_North_Arabian.js":591,"./Script/Old_Permic.js":592,"./Script/Old_Persian.js":593,"./Script/Old_Sogdian.js":594,"./Script/Old_South_Arabian.js":595,"./Script/Old_Turkic.js":596,"./Script/Oriya.js":597,"./Script/Osage.js":598,"./Script/Osmanya.js":599,"./Script/Pahawh_Hmong.js":600,"./Script/Palmyrene.js":601,"./Script/Pau_Cin_Hau.js":602,"./Script/Phags_Pa.js":603,"./Script/Phoenician.js":604,"./Script/Psalter_Pahlavi.js":605,"./Script/Rejang.js":606,"./Script/Runic.js":607,"./Script/Samaritan.js":608,"./Script/Saurashtra.js":609,"./Script/Sharada.js":610,"./Script/Shavian.js":611,"./Script/Siddham.js":612,"./Script/SignWriting.js":613,"./Script/Sinhala.js":614,"./Script/Sogdian.js":615,"./Script/Sora_Sompeng.js":616,"./Script/Soyombo.js":617,"./Script/Sundanese.js":618,"./Script/Syloti_Nagri.js":619,"./Script/Syriac.js":620,"./Script/Tagalog.js":621,"./Script/Tagbanwa.js":622,"./Script/Tai_Le.js":623,"./Script/Tai_Tham.js":624,"./Script/Tai_Viet.js":625,"./Script/Takri.js":626,"./Script/Tamil.js":627,"./Script/Tangut.js":628,"./Script/Telugu.js":629,"./Script/Thaana.js":630,"./Script/Thai.js":631,"./Script/Tibetan.js":632,"./Script/Tifinagh.js":633,"./Script/Tirhuta.js":634,"./Script/Ugaritic.js":635,"./Script/Vai.js":636,"./Script/Wancho.js":637,"./Script/Warang_Citi.js":638,"./Script/Yezidi.js":639,"./Script/Yi.js":640,"./Script/Zanabazar_Square.js":641,"./Script_Extensions/Adlam.js":642,"./Script_Extensions/Ahom.js":643,"./Script_Extensions/Anatolian_Hieroglyphs.js":644,"./Script_Extensions/Arabic.js":645,"./Script_Extensions/Armenian.js":646,"./Script_Extensions/Avestan.js":647,"./Script_Extensions/Balinese.js":648,"./Script_Extensions/Bamum.js":649,"./Script_Extensions/Bassa_Vah.js":650,"./Script_Extensions/Batak.js":651,"./Script_Extensions/Bengali.js":652,"./Script_Extensions/Bhaiksuki.js":653,"./Script_Extensions/Bopomofo.js":654,"./Script_Extensions/Brahmi.js":655,"./Script_Extensions/Braille.js":656,"./Script_Extensions/Buginese.js":657,"./Script_Extensions/Buhid.js":658,"./Script_Extensions/Canadian_Aboriginal.js":659,"./Script_Extensions/Carian.js":660,"./Script_Extensions/Caucasian_Albanian.js":661,"./Script_Extensions/Chakma.js":662,"./Script_Extensions/Cham.js":663,"./Script_Extensions/Cherokee.js":664,"./Script_Extensions/Chorasmian.js":665,"./Script_Extensions/Common.js":666,"./Script_Extensions/Coptic.js":667,"./Script_Extensions/Cuneiform.js":668,"./Script_Extensions/Cypriot.js":669,"./Script_Extensions/Cyrillic.js":670,"./Script_Extensions/Deseret.js":671,"./Script_Extensions/Devanagari.js":672,"./Script_Extensions/Dives_Akuru.js":673,"./Script_Extensions/Dogra.js":674,"./Script_Extensions/Duployan.js":675,"./Script_Extensions/Egyptian_Hieroglyphs.js":676,"./Script_Extensions/Elbasan.js":677,"./Script_Extensions/Elymaic.js":678,"./Script_Extensions/Ethiopic.js":679,"./Script_Extensions/Georgian.js":680,"./Script_Extensions/Glagolitic.js":681,"./Script_Extensions/Gothic.js":682,"./Script_Extensions/Grantha.js":683,"./Script_Extensions/Greek.js":684,"./Script_Extensions/Gujarati.js":685,"./Script_Extensions/Gunjala_Gondi.js":686,"./Script_Extensions/Gurmukhi.js":687,"./Script_Extensions/Han.js":688,"./Script_Extensions/Hangul.js":689,"./Script_Extensions/Hanifi_Rohingya.js":690,"./Script_Extensions/Hanunoo.js":691,"./Script_Extensions/Hatran.js":692,"./Script_Extensions/Hebrew.js":693,"./Script_Extensions/Hiragana.js":694,"./Script_Extensions/Imperial_Aramaic.js":695,"./Script_Extensions/Inherited.js":696,"./Script_Extensions/Inscriptional_Pahlavi.js":697,"./Script_Extensions/Inscriptional_Parthian.js":698,"./Script_Extensions/Javanese.js":699,"./Script_Extensions/Kaithi.js":700,"./Script_Extensions/Kannada.js":701,"./Script_Extensions/Katakana.js":702,"./Script_Extensions/Kayah_Li.js":703,"./Script_Extensions/Kharoshthi.js":704,"./Script_Extensions/Khitan_Small_Script.js":705,"./Script_Extensions/Khmer.js":706,"./Script_Extensions/Khojki.js":707,"./Script_Extensions/Khudawadi.js":708,"./Script_Extensions/Lao.js":709,"./Script_Extensions/Latin.js":710,"./Script_Extensions/Lepcha.js":711,"./Script_Extensions/Limbu.js":712,"./Script_Extensions/Linear_A.js":713,"./Script_Extensions/Linear_B.js":714,"./Script_Extensions/Lisu.js":715,"./Script_Extensions/Lycian.js":716,"./Script_Extensions/Lydian.js":717,"./Script_Extensions/Mahajani.js":718,"./Script_Extensions/Makasar.js":719,"./Script_Extensions/Malayalam.js":720,"./Script_Extensions/Mandaic.js":721,"./Script_Extensions/Manichaean.js":722,"./Script_Extensions/Marchen.js":723,"./Script_Extensions/Masaram_Gondi.js":724,"./Script_Extensions/Medefaidrin.js":725,"./Script_Extensions/Meetei_Mayek.js":726,"./Script_Extensions/Mende_Kikakui.js":727,"./Script_Extensions/Meroitic_Cursive.js":728,"./Script_Extensions/Meroitic_Hieroglyphs.js":729,"./Script_Extensions/Miao.js":730,"./Script_Extensions/Modi.js":731,"./Script_Extensions/Mongolian.js":732,"./Script_Extensions/Mro.js":733,"./Script_Extensions/Multani.js":734,"./Script_Extensions/Myanmar.js":735,"./Script_Extensions/Nabataean.js":736,"./Script_Extensions/Nandinagari.js":737,"./Script_Extensions/New_Tai_Lue.js":738,"./Script_Extensions/Newa.js":739,"./Script_Extensions/Nko.js":740,"./Script_Extensions/Nushu.js":741,"./Script_Extensions/Nyiakeng_Puachue_Hmong.js":742,"./Script_Extensions/Ogham.js":743,"./Script_Extensions/Ol_Chiki.js":744,"./Script_Extensions/Old_Hungarian.js":745,"./Script_Extensions/Old_Italic.js":746,"./Script_Extensions/Old_North_Arabian.js":747,"./Script_Extensions/Old_Permic.js":748,"./Script_Extensions/Old_Persian.js":749,"./Script_Extensions/Old_Sogdian.js":750,"./Script_Extensions/Old_South_Arabian.js":751,"./Script_Extensions/Old_Turkic.js":752,"./Script_Extensions/Oriya.js":753,"./Script_Extensions/Osage.js":754,"./Script_Extensions/Osmanya.js":755,"./Script_Extensions/Pahawh_Hmong.js":756,"./Script_Extensions/Palmyrene.js":757,"./Script_Extensions/Pau_Cin_Hau.js":758,"./Script_Extensions/Phags_Pa.js":759,"./Script_Extensions/Phoenician.js":760,"./Script_Extensions/Psalter_Pahlavi.js":761,"./Script_Extensions/Rejang.js":762,"./Script_Extensions/Runic.js":763,"./Script_Extensions/Samaritan.js":764,"./Script_Extensions/Saurashtra.js":765,"./Script_Extensions/Sharada.js":766,"./Script_Extensions/Shavian.js":767,"./Script_Extensions/Siddham.js":768,"./Script_Extensions/SignWriting.js":769,"./Script_Extensions/Sinhala.js":770,"./Script_Extensions/Sogdian.js":771,"./Script_Extensions/Sora_Sompeng.js":772,"./Script_Extensions/Soyombo.js":773,"./Script_Extensions/Sundanese.js":774,"./Script_Extensions/Syloti_Nagri.js":775,"./Script_Extensions/Syriac.js":776,"./Script_Extensions/Tagalog.js":777,"./Script_Extensions/Tagbanwa.js":778,"./Script_Extensions/Tai_Le.js":779,"./Script_Extensions/Tai_Tham.js":780,"./Script_Extensions/Tai_Viet.js":781,"./Script_Extensions/Takri.js":782,"./Script_Extensions/Tamil.js":783,"./Script_Extensions/Tangut.js":784,"./Script_Extensions/Telugu.js":785,"./Script_Extensions/Thaana.js":786,"./Script_Extensions/Thai.js":787,"./Script_Extensions/Tibetan.js":788,"./Script_Extensions/Tifinagh.js":789,"./Script_Extensions/Tirhuta.js":790,"./Script_Extensions/Ugaritic.js":791,"./Script_Extensions/Vai.js":792,"./Script_Extensions/Wancho.js":793,"./Script_Extensions/Warang_Citi.js":794,"./Script_Extensions/Yezidi.js":795,"./Script_Extensions/Yi.js":796,"./Script_Extensions/Zanabazar_Square.js":797,"./index.js":798,"./unicode-version.js":799};function s(n){var t=o(n);return e(t)}function o(n){if(!e.o(a,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return a[n]}s.keys=function(){return Object.keys(a)},s.resolve=o,n.exports=s,s.id=394},810:function(n,t,e){var a={"./asset-list-item_2.entry.js":[848,145],"./asset-property-view.entry.js":[849,142],"./bp-app_4.entry.js":[850,7,150],"./bp-asset-explorer-empty.entry.js":[851,10],"./bp-asset-explorer-error.entry.js":[852,11],"./bp-asset-explorer-huge.entry.js":[853,12],"./bp-asset-explorer-loading.entry.js":[854,13],"./bp-asset-explorer-multi-select.entry.js":[855,14],"./bp-asset-explorer-single-select.entry.js":[856,15],"./bp-asset-explorer-standard.entry.js":[857,16],"./bp-bar-chart-pos-neg.entry.js":[858,17],"./bp-box.entry.js":[859,18],"./bp-chart-legend-standard.entry.js":[860,19],"./bp-data-store_2.entry.js":[861,5,143],"./bp-error-badge_15.entry.js":[862,0,1,4,6,20],"./bp-mocked-source-widget_2.entry.js":[863,0,144],"./context-consumer.entry.js":[864,21],"./line-chart-viewport-change.entry.js":[865,22],"./monitor-angled-line-segment.entry.js":[866,0,1,2,3,23],"./monitor-bar-chart.entry.js":[867,0,1,2,24],"./monitor-chart-y-range.entry.js":[868,25],"./monitor-circle-point-shaders.entry.js":[869,0,1,2,3,26],"./monitor-data-provider_2.entry.js":[870,5,138],"./monitor-expandable-input-standard.entry.js":[871,27],"./monitor-grid_4.entry.js":[872,0,1,4,6,28],"./monitor-kpi-base.entry.js":[873,133],"./monitor-kpi-standard.entry.js":[874,30],"./monitor-kpi.entry.js":[875,29],"./monitor-latest-value-standard.entry.js":[876,31],"./monitor-latest-value.entry.js":[877,0,136],"./monitor-lazily-load-standard.entry.js":[878,32],"./monitor-lazily-load-web-component.entry.js":[879,33],"./monitor-lazily-loaded-box.entry.js":[880,34],"./monitor-line-chart-colored-point.entry.js":[881,0,1,2,3,35],"./monitor-line-chart-stream-data.entry.js":[882,36],"./monitor-line-chart.entry.js":[883,0,1,2,141],"./monitor-multiple-bars.entry.js":[884,0,1,2,3,37],"./monitor-multiple-lines-overlapping.entry.js":[885,0,1,2,3,39],"./monitor-multiple-lines.entry.js":[886,0,1,2,3,38],"./monitor-scatter-chart-dynamic-data.entry.js":[887,40],"./monitor-scatter-chart-threshold-coloration-band.entry.js":[888,41],"./monitor-scatter-chart-threshold-coloration-exact-point.entry.js":[889,42],"./monitor-scatter-chart-threshold-coloration-multiple-data-stream.entry.js":[890,43],"./monitor-scatter-chart-threshold-coloration-multiple-thresholds.entry.js":[891,44],"./monitor-scatter-chart-threshold-no-coloration.entry.js":[892,46],"./monitor-scatter-chart-threshold.entry.js":[893,45],"./monitor-scatter-chart-tooltip-with-multiple-data-streams-and-trends.entry.js":[894,47],"./monitor-scatter-chart-trend-line-color-configuration.entry.js":[895,48],"./monitor-scatter-chart-trend-line-with-legend.entry.js":[896,49],"./monitor-scatter-chart.entry.js":[897,0,1,2,147],"./monitor-single-bar.entry.js":[898,0,1,2,3,50],"./monitor-single-colored-bar.entry.js":[899,0,1,2,3,51],"./monitor-size-provider-standard.entry.js":[900,52],"./monitor-status-cell.entry.js":[901,137],"./monitor-status-chart_5.entry.js":[902,0,1,2,4,53],"./monitor-status-grid-standard.entry.js":[903,55],"./monitor-status-grid.entry.js":[904,54],"./monitor-straight-line-segment-colored.entry.js":[905,0,1,2,3,56],"./monitor-straight-line-segment.entry.js":[906,0,1,2,3,57],"./monitor-table-base.entry.js":[907,0,134],"./monitor-table-cell.entry.js":[908,58],"./monitor-table.entry.js":[909,0,1,135],"./monitor-threshold-coloration-toggle.entry.js":[910,59],"./monitor-toggle-test.entry.js":[911,61],"./monitor-toggle.entry.js":[912,60],"./monitor-webgl-bar-chart-dynamic-buffer.entry.js":[913,62],"./monitor-webgl-bar-chart-dynamic-data-streams.entry.js":[914,64],"./monitor-webgl-bar-chart-dynamic-data.entry.js":[915,63],"./monitor-webgl-bar-chart-fast-viewport.entry.js":[916,65],"./monitor-webgl-bar-chart-margin.entry.js":[917,66],"./monitor-webgl-bar-chart-negative.entry.js":[918,67],"./monitor-webgl-bar-chart-positive-negative.entry.js":[919,68],"./monitor-webgl-bar-chart-standard.entry.js":[920,69],"./monitor-webgl-bar-chart-start-from-zero.entry.js":[921,70],"./monitor-webgl-bar-chart-threshold-coloration-band.entry.js":[922,71],"./monitor-webgl-bar-chart-threshold-coloration-exact-point.entry.js":[923,73],"./monitor-webgl-bar-chart-threshold-coloration-multiple-data-stream.entry.js":[924,74],"./monitor-webgl-bar-chart-threshold-coloration-multiple-thresholds.entry.js":[925,75],"./monitor-webgl-bar-chart-threshold-coloration.entry.js":[926,72],"./monitor-webgl-bar-chart-threshold-no-coloration.entry.js":[927,76],"./monitor-webgl-chart-annotations-always-in-viewport.entry.js":[928,77],"./monitor-webgl-chart-annotations.entry.js":[929,78],"./monitor-webgl-chart-axis.entry.js":[930,79],"./monitor-webgl-chart-dynamic-charts.entry.js":[931,80],"./monitor-webgl-chart-large-viewport.entry.js":[932,81],"./monitor-webgl-chart-multi.entry.js":[933,82],"./monitor-webgl-chart-no-annotations.entry.js":[934,83],"./monitor-webgl-chart-standard-with-legend-on-right.entry.js":[935,86],"./monitor-webgl-chart-standard-with-legend.entry.js":[936,85],"./monitor-webgl-chart-standard.entry.js":[937,84],"./monitor-webgl-chart-threshold-coloration-band.entry.js":[938,87],"./monitor-webgl-chart-threshold-coloration-exact-point.entry.js":[939,88],"./monitor-webgl-chart-threshold-coloration-multiple-data-stream.entry.js":[940,89],"./monitor-webgl-chart-threshold-coloration-multiple-thresholds.entry.js":[941,90],"./monitor-webgl-chart-threshold-coloration-split-half.entry.js":[942,91],"./monitor-webgl-chart-tooltip-with-multiple-data-streams.entry.js":[943,92],"./monitor-webgl-line-chart-dynamic-buffer.entry.js":[944,93],"./monitor-webgl-line-chart-dynamic-data-streams.entry.js":[945,95],"./monitor-webgl-line-chart-dynamic-data.entry.js":[946,94],"./multiple-statuses.entry.js":[947,0,1,2,3,96],"./single-colored-status.entry.js":[948,0,1,2,3,98],"./single-status.entry.js":[949,0,1,2,3,99],"./sitewise-asset-list-error.entry.js":[950,100],"./sitewise-asset-list-loading.entry.js":[951,101],"./sitewise-asset-list-multiple-lists.entry.js":[952,102],"./sitewise-asset-list-no-select.entry.js":[953,103],"./sitewise-asset-list_5.entry.js":[954,148],"./sitewise-component-threshold-coloration-toggle.entry.js":[955,104],"./sitewise-dynamic-widget.entry.js":[956,139],"./sitewise-list-empty_3.entry.js":[957,105],"./sitewise-model-list-error.entry.js":[958,106],"./sitewise-model-list-loading.entry.js":[959,107],"./sitewise-model-list-with-data.entry.js":[960,108],"./sitewise-model-list_2.entry.js":[961,109],"./status-chart-dynamic-buffer.entry.js":[962,110],"./status-chart-dynamic-data-streams.entry.js":[963,112],"./status-chart-dynamic-data.entry.js":[964,111],"./status-chart-fast-viewport.entry.js":[965,113],"./status-chart-margin.entry.js":[966,114],"./status-chart-multiple-data-streams.entry.js":[967,115],"./status-chart-raw-data.entry.js":[968,116],"./status-chart-standard.entry.js":[969,117],"./status-chart-threshold-coloration-band.entry.js":[970,118],"./status-chart-threshold-coloration-exact-point.entry.js":[971,120],"./status-chart-threshold-coloration-multiple-data-stream.entry.js":[972,121],"./status-chart-threshold-coloration-multiple-thresholds.entry.js":[973,122],"./status-chart-threshold-coloration.entry.js":[974,119],"./status-chart-threshold-no-coloration.entry.js":[975,123],"./stencil-async-content.entry.js":[976,124],"./stencil-route-link.entry.js":[977,7,125],"./stencil-route-title.entry.js":[978,126],"./stencil-router-prompt.entry.js":[979,127],"./stencil-router-redirect.entry.js":[980,128],"./synchro-demo.entry.js":[981,129],"./testing-ground.entry.js":[982,130],"./testing-state-container.entry.js":[983,131],"./virtual-scroll.entry.js":[984,146],"./widget-test-route.entry.js":[985,140]};function s(n){if(!e.o(a,n))return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=a[n],s=t[0];return Promise.all(t.slice(1).map(e.e)).then((function(){return e(s)}))}s.keys=function(){return Object.keys(a)},s.id=810,n.exports=s},811:function(n,t,e){},813:function(n,t,e){var a={"./asset-list-item_2.entry.js":[989,145],"./asset-property-view.entry.js":[990,142],"./bp-app_4.entry.js":[991,7,150],"./bp-asset-explorer-empty.entry.js":[992,10],"./bp-asset-explorer-error.entry.js":[993,11],"./bp-asset-explorer-huge.entry.js":[994,12],"./bp-asset-explorer-loading.entry.js":[995,13],"./bp-asset-explorer-multi-select.entry.js":[996,14],"./bp-asset-explorer-single-select.entry.js":[997,15],"./bp-asset-explorer-standard.entry.js":[998,16],"./bp-bar-chart-pos-neg.entry.js":[999,17],"./bp-box.entry.js":[1e3,18],"./bp-chart-legend-standard.entry.js":[1001,19],"./bp-data-store_2.entry.js":[1002,5,143],"./bp-error-badge_15.entry.js":[1003,0,1,4,6,20],"./bp-mocked-source-widget_2.entry.js":[1004,0,144],"./context-consumer.entry.js":[1005,21],"./line-chart-viewport-change.entry.js":[1006,22],"./monitor-angled-line-segment.entry.js":[1007,0,1,2,3,23],"./monitor-bar-chart.entry.js":[1008,0,1,2,24],"./monitor-chart-y-range.entry.js":[1009,25],"./monitor-circle-point-shaders.entry.js":[1010,0,1,2,3,26],"./monitor-data-provider_2.entry.js":[1011,5,138],"./monitor-expandable-input-standard.entry.js":[1012,27],"./monitor-grid_4.entry.js":[1013,0,1,4,6,28],"./monitor-kpi-base.entry.js":[1014,133],"./monitor-kpi-standard.entry.js":[1015,30],"./monitor-kpi.entry.js":[1016,29],"./monitor-latest-value-standard.entry.js":[1017,31],"./monitor-latest-value.entry.js":[1018,0,136],"./monitor-lazily-load-standard.entry.js":[1019,32],"./monitor-lazily-load-web-component.entry.js":[1020,33],"./monitor-lazily-loaded-box.entry.js":[1021,34],"./monitor-line-chart-colored-point.entry.js":[1022,0,1,2,3,35],"./monitor-line-chart-stream-data.entry.js":[1023,36],"./monitor-line-chart.entry.js":[1024,0,1,2,141],"./monitor-multiple-bars.entry.js":[1025,0,1,2,3,37],"./monitor-multiple-lines-overlapping.entry.js":[1026,0,1,2,3,39],"./monitor-multiple-lines.entry.js":[1027,0,1,2,3,38],"./monitor-scatter-chart-dynamic-data.entry.js":[1028,40],"./monitor-scatter-chart-threshold-coloration-band.entry.js":[1029,41],"./monitor-scatter-chart-threshold-coloration-exact-point.entry.js":[1030,42],"./monitor-scatter-chart-threshold-coloration-multiple-data-stream.entry.js":[1031,43],"./monitor-scatter-chart-threshold-coloration-multiple-thresholds.entry.js":[1032,44],"./monitor-scatter-chart-threshold-no-coloration.entry.js":[1033,46],"./monitor-scatter-chart-threshold.entry.js":[1034,45],"./monitor-scatter-chart-tooltip-with-multiple-data-streams-and-trends.entry.js":[1035,47],"./monitor-scatter-chart-trend-line-color-configuration.entry.js":[1036,48],"./monitor-scatter-chart-trend-line-with-legend.entry.js":[1037,49],"./monitor-scatter-chart.entry.js":[1038,0,1,2,147],"./monitor-single-bar.entry.js":[1039,0,1,2,3,50],"./monitor-single-colored-bar.entry.js":[1040,0,1,2,3,51],"./monitor-size-provider-standard.entry.js":[1041,52],"./monitor-status-cell.entry.js":[1042,137],"./monitor-status-chart_5.entry.js":[1043,0,1,2,4,53],"./monitor-status-grid-standard.entry.js":[1044,55],"./monitor-status-grid.entry.js":[1045,54],"./monitor-straight-line-segment-colored.entry.js":[1046,0,1,2,3,56],"./monitor-straight-line-segment.entry.js":[1047,0,1,2,3,57],"./monitor-table-base.entry.js":[1048,0,134],"./monitor-table-cell.entry.js":[1049,58],"./monitor-table.entry.js":[1050,0,1,135],"./monitor-threshold-coloration-toggle.entry.js":[1051,59],"./monitor-toggle-test.entry.js":[1052,61],"./monitor-toggle.entry.js":[1053,60],"./monitor-webgl-bar-chart-dynamic-buffer.entry.js":[1054,62],"./monitor-webgl-bar-chart-dynamic-data-streams.entry.js":[1055,64],"./monitor-webgl-bar-chart-dynamic-data.entry.js":[1056,63],"./monitor-webgl-bar-chart-fast-viewport.entry.js":[1057,65],"./monitor-webgl-bar-chart-margin.entry.js":[1058,66],"./monitor-webgl-bar-chart-negative.entry.js":[1059,67],"./monitor-webgl-bar-chart-positive-negative.entry.js":[1060,68],"./monitor-webgl-bar-chart-standard.entry.js":[1061,69],"./monitor-webgl-bar-chart-start-from-zero.entry.js":[1062,70],"./monitor-webgl-bar-chart-threshold-coloration-band.entry.js":[1063,71],"./monitor-webgl-bar-chart-threshold-coloration-exact-point.entry.js":[1064,73],"./monitor-webgl-bar-chart-threshold-coloration-multiple-data-stream.entry.js":[1065,74],"./monitor-webgl-bar-chart-threshold-coloration-multiple-thresholds.entry.js":[1066,75],"./monitor-webgl-bar-chart-threshold-coloration.entry.js":[1067,72],"./monitor-webgl-bar-chart-threshold-no-coloration.entry.js":[1068,76],"./monitor-webgl-chart-annotations-always-in-viewport.entry.js":[1069,77],"./monitor-webgl-chart-annotations.entry.js":[1070,78],"./monitor-webgl-chart-axis.entry.js":[1071,79],"./monitor-webgl-chart-dynamic-charts.entry.js":[1072,80],"./monitor-webgl-chart-large-viewport.entry.js":[1073,81],"./monitor-webgl-chart-multi.entry.js":[1074,82],"./monitor-webgl-chart-no-annotations.entry.js":[1075,83],"./monitor-webgl-chart-standard-with-legend-on-right.entry.js":[1076,86],"./monitor-webgl-chart-standard-with-legend.entry.js":[1077,85],"./monitor-webgl-chart-standard.entry.js":[1078,84],"./monitor-webgl-chart-threshold-coloration-band.entry.js":[1079,87],"./monitor-webgl-chart-threshold-coloration-exact-point.entry.js":[1080,88],"./monitor-webgl-chart-threshold-coloration-multiple-data-stream.entry.js":[1081,89],"./monitor-webgl-chart-threshold-coloration-multiple-thresholds.entry.js":[1082,90],"./monitor-webgl-chart-threshold-coloration-split-half.entry.js":[1083,91],"./monitor-webgl-chart-tooltip-with-multiple-data-streams.entry.js":[1084,92],"./monitor-webgl-line-chart-dynamic-buffer.entry.js":[1085,93],"./monitor-webgl-line-chart-dynamic-data-streams.entry.js":[1086,95],"./monitor-webgl-line-chart-dynamic-data.entry.js":[1087,94],"./multiple-statuses.entry.js":[1088,0,1,2,3,96],"./single-colored-status.entry.js":[1089,0,1,2,3,98],"./single-status.entry.js":[1090,0,1,2,3,99],"./sitewise-asset-list-error.entry.js":[1091,100],"./sitewise-asset-list-loading.entry.js":[1092,101],"./sitewise-asset-list-multiple-lists.entry.js":[1093,102],"./sitewise-asset-list-no-select.entry.js":[1094,103],"./sitewise-asset-list_5.entry.js":[1095,148],"./sitewise-component-threshold-coloration-toggle.entry.js":[1096,104],"./sitewise-dynamic-widget.entry.js":[1097,139],"./sitewise-list-empty_3.entry.js":[1098,105],"./sitewise-model-list-error.entry.js":[1099,106],"./sitewise-model-list-loading.entry.js":[1100,107],"./sitewise-model-list-with-data.entry.js":[1101,108],"./sitewise-model-list_2.entry.js":[1102,109],"./status-chart-dynamic-buffer.entry.js":[1103,110],"./status-chart-dynamic-data-streams.entry.js":[1104,112],"./status-chart-dynamic-data.entry.js":[1105,111],"./status-chart-fast-viewport.entry.js":[1106,113],"./status-chart-margin.entry.js":[1107,114],"./status-chart-multiple-data-streams.entry.js":[1108,115],"./status-chart-raw-data.entry.js":[1109,116],"./status-chart-standard.entry.js":[1110,117],"./status-chart-threshold-coloration-band.entry.js":[1111,118],"./status-chart-threshold-coloration-exact-point.entry.js":[1112,120],"./status-chart-threshold-coloration-multiple-data-stream.entry.js":[1113,121],"./status-chart-threshold-coloration-multiple-thresholds.entry.js":[1114,122],"./status-chart-threshold-coloration.entry.js":[1115,119],"./status-chart-threshold-no-coloration.entry.js":[1116,123],"./stencil-async-content.entry.js":[1117,124],"./stencil-route-link.entry.js":[1118,7,125],"./stencil-route-title.entry.js":[1119,126],"./stencil-router-prompt.entry.js":[1120,127],"./stencil-router-redirect.entry.js":[1121,128],"./synchro-demo.entry.js":[1122,129],"./testing-ground.entry.js":[1123,130],"./testing-state-container.entry.js":[1124,131],"./virtual-scroll.entry.js":[1125,146],"./widget-test-route.entry.js":[1126,140]};function s(n){if(!e.o(a,n))return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=a[n],s=t[0];return Promise.all(t.slice(1).map(e.e)).then((function(){return e(s)}))}s.keys=function(){return Object.keys(a)},s.id=813,n.exports=s},815:function(n,t,e){var a={react:e(1)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"markdown",content:"Synchro-Charts makes it easy for developers to visualize and interact with time-series data on live, synchronized charts."},{type:"code",content:"<monitor-demo />",settings:{},evalInContext:o},{type:"markdown",content:"Navigate Your Charts:\n\n*   **Pan**: hold **shift**, click and drag on any chart\n*   **Zoom In**: **double-click** on a position within a chart to zoom into that area.\n*   **Zoom Out**: hold **shift** and **double-click** on a position within a chart to zoom away from that area.\n*   **Restrict Time Span**: Click and drag through the interval of time you wish to restrict the viewport to.\n\n***NOTE**: The styles on the UI controls outside of the core chart are for demo purposes only, please follow Polaris guidelines for actual implementation.*\n\n### What Is Synchro-Charts?\n\nSynchro-Charts is a webGL based charting framework, providing an interactive, synchronized view of time series data, both historically and real time.\n\nWhat makes Synchro-Charts special is the focus on providing the ability to smoothly navigate through time with gestures and outside controls, across developer-defined groupings of charts. This enables\na view into data across charts, with a shared context which smoothly transitions as you navigate through time."}]},816:function(n,t,e){var a={react:e(1)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:'1.  Update your Config\n    ```bash\n    <span class="token comment"># Have NPM Pretty much as a build system </span>\n    build-system <span class="token operator">=</span> npm-pretty-much<span class="token punctuation">;</span>\n    build-tools <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token number">1.0</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            <span class="token punctuation">..</span>.\n            NpmPrettyMuch <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    dependencies <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token number">1.0</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            <span class="token punctuation">..</span>.\n            <span class="token comment"># Add the below line as a dependency</span>\n            ReactSynchroCharts <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>\n            <span class="token punctuation">..</span>.\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    ```\n\n2.  Install it as a dependency to your package.json\n\n    ```bash\n    brazil-build <span class="token function">install</span> --save @amzn/react-synchro-charts\n    ```\n\n3.  Include the global styles somewhere at the root of your project\n\n    ```js\n    <span class="token keyword">import</span> <span class="token string">\'@amzn/react-synchro-charts/dist/styles.css\'</span><span class="token punctuation">;</span>\n    ```\n\n4.  Include the webgl context such that it\'s present where ever you utilize webgl based widgets (not required for all widgets)\n\n    Make sure the MonitorWebglContext is placed such that it has the correct depth relative to the widgets.\n\n    ```jsx\n    <span class="token keyword">import</span> <span class="token punctuation">{</span> WebglContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@amzn/react-synchro-charts"</span><span class="token punctuation">;</span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WebglContext</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    ```'}]},817:function(n,t,e){n.exports={doclets:{},displayName:"BarChart",methods:[],props:[],examples:e(818)}},818:function(n,t,e){var a={"@amzn/bp-components":e(49),react:e(1),"./BarChart.js":e(186)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst BarChart$0 = require('./BarChart.js');\nconst BarChart = BarChart$0.default || (BarChart$0['BarChart'] || BarChart$0);",s);n.exports=[{type:"markdown",content:"Visualize one or more data streams with vertical bars to help find anomalies.\n\nwith this component, you will be able to add thresholds/ annotation and trend lines."},{type:"code",content:"<div style={{ width: '100%', height: '500px' }}>\n  <BarChart\n    widgetId=\"widget-id\"\n    viewPort={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 0, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        color: '#0073bb',\n        name: 'Car Count',\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        aggregates: {\n          [1000 * 60 * 60 * 24 * 30]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 20,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 50,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 35,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 15,\n          }]\n        },\n      }, {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        color: '#dd6b10',\n        name: 'Boat Count',\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        aggregates: {\n          [1000 * 60 * 60 * 24 * 30]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n    />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Bar chart with alarms\n\nYou can show the current latest alarm status on the legend through setting the `icon` property for the threshold.\n\nLearn how to display the alarms value as a threshold [here](/#section-threshold)"},{type:"code",content:"import { DataType, COMPARISON_OPERATOR, StatusIcon } from '@amzn/bp-components';\n<div style={{ width: '100%', height: '500px' }}>\n  <BarChart\n    widgetId=\"widget-id\"\n    viewPort={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 0, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        color: '#0073bb',\n        name: 'Car Count',\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        aggregates: {\n          [1000 * 60 * 60 * 24 * 30]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 20,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 50,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 35,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 15,\n          }]\n        },\n      }, {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        color: '#dd6b10',\n        name: 'Boat Count',\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        aggregates: {\n          [1000 * 60 * 60 * 24 * 30]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n    annotations={{\n      y: [\n        {\n          color: '#d13212',\n          value: 90,\n          comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n          icon: StatusIcon.ACTIVE,\n          showValue: true,\n        }],\n    }}\n    />\n</div>",settings:{},evalInContext:o}]},819:function(n,t,e){n.exports={doclets:{},displayName:"KPI",methods:[],props:[],examples:e(820)}},820:function(n,t,e){var a={"@amzn/bp-components":e(49),react:e(1),"./KPI.js":e(187)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst KPI$0 = require('./KPI.js');\nconst KPI = KPI$0.default || (KPI$0['KPI'] || KPI$0);",s);n.exports=[{type:"markdown",content:"Key Performance Indicator (KPI) visualizes the latest value from a data stream by emphasizing the property value.\nFor data stream of type `NUMBER` it will also display the trending percentage by using the two most recent data points.\n\nYou can activate the KPI's tooltip to see more information!\n\nBelow is an example of a single data stream. When it is displaying only one data stream, it will put more emphasis on\ntitle and the value."},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@amzn/bp-components';\n\n<div style={{ width: '100%', height: '100%' }}>\n  <KPI\n    dataStreams={[\n      {\n        id: 'wind-temperature',\n        name: 'Wind temperature',\n        data: [{\n          x: new Date(2001, 0, 0),\n          y: 10,\n        }],\n        unit: 'C',\n        color: 'black',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      }\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#1d8102',\n        value: 15,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        dataStreamIds: ['car-speed-alarm']\n      }],\n    }}\n    viewPort={{ duration: 0, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### KPI with multiple data streams."},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StreamType, StatusIcon } from '@amzn/bp-components';\n<div style={{ width: '100%', height: '100%' }}>\n  <KPI\n    dataStreams={[\n      {\n        id: 'wind-temperature',\n        name: 'Wind temperature',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 10,\n        }],\n        unit: 'C', \n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperature-with-trends',\n        name: 'Wind temperature trends',\n        data: [{\n          x: new Date(2000, 11, 0).getTime(),\n          y: 10,\n        }, {\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed',\n        name: 'Car speed alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        associatedStreams: [{\n          id:'car-speed-alarm',\n          type: StreamType.ALARM,\n        }],\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-alarm',\n        name: 'Car speed alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'Warning',\n        }],\n        resolution: 0,\n        streamType: StreamType.ALARM,\n        dataType: DataType.STRING,\n      }\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#1d8102',\n        value: 15,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        dataStreamIds: ['car-speed-alarm'],\n        icon: StatusIcon.LATCHED,\n      }],\n    }}\n    viewPort={{ duration: 0, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### KPI with trends\n\nThis is an example of a KPI with one single data stream which will display the KPI with trends."},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@amzn/bp-components';\n<div style={{ width: '100%', height: '100%' }}>\n  <KPI\n    dataStreams={[\n      {\n        id: 'wind-temperature-with-trends',\n        name: 'Wind temperature Trends',\n        data: [{\n          x: new Date(2000, 11, 0).getTime(),\n          y: 10,\n        }, {\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#1d8102',\n        value: 15,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }],\n    }}\n    viewPort={{ duration: 0, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Visualizing alarm on KPI\n\nWhen paired with an alarm data stream, the KPI component will combine it with the regular data stream and visualize\nthe latest alarm status within the component.\n\nYou can provide an `icon` property within the threshold to show an icon that is associated with the breaching color/status\n\nSupported Icon:\n\n1.  error\n2.  active\n3.  normal\n4.  acknowledged\n5.  snoozed\n6.  disabled\n7.  latched"},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StatusIcon, StreamType } from '@amzn/bp-components';\n<div style={{ width: '100%', height: '100%' }}>\n  <KPI\n    dataStreams={[\n      {\n        id: 'car-speed',\n        name: 'Car Speed With Alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n        associatedStreams: [{\n          id:'car-speed-alarm',\n          type: StreamType.ALARM,\n        }]\n      },\n      {\n        id: 'car-speed-alarm',\n        name: 'Car Speed Alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'Warning',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      }\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        dataStreamIds: ['car-speed-alarm'],\n        icon: StatusIcon.LATCHED\n      }],\n    }}\n    viewPort={{ duration: 0, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n  />\n</div>",settings:{},evalInContext:o}]},821:function(n,t,e){n.exports={doclets:{},displayName:"LineChart",methods:[],props:[],examples:e(822)}},822:function(n,t,e){var a={"@amzn/bp-components":e(49),react:e(1),"./LineChart.js":e(188)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst LineChart$0 = require('./LineChart.js');\nconst LineChart = LineChart$0.default || (LineChart$0['LineChart'] || LineChart$0);",s);n.exports=[{type:"markdown",content:"Visualize frequently data streams to see the trend over time.\n\nwith this component, you will be able to add thresholds/ annotation and trend lines."},{type:"code",content:"const MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '500px' }}>\n  <LineChart\n    widgetId=\"widget-id\"\n    viewPort={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 2, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        resolution: MONTH_RESOLUTION,\n        name: 'Car Count',\n        color: '#0073bb',\n        aggregates: {\n          [MONTH_RESOLUTION]: [\n            {\n              x: new Date(2000, 0, 0).getTime(),\n              y: 10,\n            }, {\n              x: new Date(2000, 3, 0).getTime(),\n              y: 20,\n            }, {\n              x: new Date(2000, 6, 0).getTime(),\n              y: 50,\n            }, {\n              x: new Date(2000, 9, 0).getTime(),\n              y: 35,\n            }, {\n              x: new Date(2001, 0, 0).getTime(),\n              y: 15,\n            } \n          ]\n        },\n      },\n      {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        name: 'Boat Count',\n        color: '#dd6b10',\n        resolution: MONTH_RESOLUTION,\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n    />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Line chart with alarms\n\nYou can show the current latest alarm status on the legend through setting the `icon` property for the threshold.\n\nLearn how to display the alarms value as a threshold [here](/#section-threshold)"},{type:"code",content:"import { DataType, COMPARISON_OPERATOR, StatusIcon } from '@amzn/bp-components';\nconst MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '500px' }}>\n  <LineChart\n    widgetId=\"widget-id\"\n    viewPort={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 2, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        resolution: MONTH_RESOLUTION,\n        name: 'Car Count',\n        color: '#0073bb',\n        aggregates: {\n          [MONTH_RESOLUTION]: [\n            {\n              x: new Date(2000, 0, 0).getTime(),\n              y: 10,\n            }, {\n              x: new Date(2000, 3, 0).getTime(),\n              y: 20,\n            }, {\n              x: new Date(2000, 6, 0).getTime(),\n              y: 50,\n            }, {\n              x: new Date(2000, 9, 0).getTime(),\n              y: 35,\n            }, {\n              x: new Date(2001, 0, 0).getTime(),\n              y: 15,\n            }\n          ]\n        },\n      },\n      {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        color: '#dd6b10',\n        name: 'Boat Count',\n        resolution: MONTH_RESOLUTION,\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n    annotations={{\n      y: [\n        {\n          color: '#d13212',\n          value: 90,\n          comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n          icon: StatusIcon.ACTIVE,\n          showValue: true,\n        }],\n    }}\n    />\n</div>",settings:{},evalInContext:o}]},823:function(n,t,e){n.exports={doclets:{},displayName:"ScatterChart",methods:[],props:[],examples:e(824)}},824:function(n,t,e){var a={"@amzn/bp-components":e(49),react:e(1),"./ScatterChart.js":e(189)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst ScatterChart$0 = require('./ScatterChart.js');\nconst ScatterChart = ScatterChart$0.default || (ScatterChart$0['ScatterChart'] || ScatterChart$0);",s);n.exports=[{type:"markdown",content:"Visualize frequently data streams to see the trend over time.\n\nwith this component, you will be able to add thresholds/ annotation and trend lines."},{type:"code",content:"const MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '500px' }}>\n  <ScatterChart\n    widgetId=\"widget-id\"\n    viewPort={{\n      start: new Date(1999, 11, 0),\n      end: new Date(2001, 2, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        resolution: MONTH_RESOLUTION,\n        name: 'Car Count',\n        color: '#0073bb',\n        aggregates: {\n          [MONTH_RESOLUTION]: [\n            {\n              x: new Date(2000, 0, 0).getTime(),\n              y: 10,\n            }, {\n              x: new Date(2000, 3, 0).getTime(),\n              y: 20,\n            }, {\n              x: new Date(2000, 6, 0).getTime(),\n              y: 50,\n            }, {\n              x: new Date(2000, 9, 0).getTime(),\n              y: 35,\n            }, {\n              x: new Date(2001, 0, 0).getTime(),\n              y: 15,\n            }\n          ]\n        },\n      },\n      {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        name: 'Boat Count',\n        color: '#dd6b10',\n        resolution: MONTH_RESOLUTION,\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Scatter chart with alarm\n\nYou can show the current latest alarm status on the legend through setting the `icon` property for the threshold.\n\nLearn how to display the alarms value as a threshold [here](/#section-threshold)"},{type:"code",content:"import { DataType, COMPARISON_OPERATOR, StatusIcon } from '@amzn/bp-components';\nconst MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '500px' }}>\n  <ScatterChart\n    widgetId=\"widget-id\"\n    viewPort={{\n        start: new Date(1999, 11, 0),\n        end: new Date(2001, 2, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        resolution: MONTH_RESOLUTION,\n        color: '#0073bb',\n        name: 'Car Count',\n        aggregates: {\n          [MONTH_RESOLUTION]: [\n            {\n              x: new Date(2000, 0, 0).getTime(),\n              y: 10,\n            }, {\n              x: new Date(2000, 3, 0).getTime(),\n              y: 20,\n            }, {\n              x: new Date(2000, 6, 0).getTime(),\n              y: 50,\n            }, {\n              x: new Date(2000, 9, 0).getTime(),\n              y: 35,\n            }, {\n              x: new Date(2001, 0, 0).getTime(),\n              y: 15,\n            }\n          ]\n        },\n      },\n      {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        color: '#dd6b10',\n        name: 'Boat Count',\n        resolution: MONTH_RESOLUTION,\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n\n    annotations={{\n      y: [\n        {\n          color: '#d13212',\n          value: 90,\n          comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n          icon: StatusIcon.ACTIVE,\n          showValue: true,\n        }],\n    }}\n  />\n</div>",settings:{},evalInContext:o}]},825:function(n,t,e){n.exports={doclets:{},displayName:"StatusGrid",methods:[],props:[],examples:e(826)}},826:function(n,t,e){var a={"@amzn/bp-components":e(49),react:e(1),"./StatusGrid.js":e(190)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst StatusGrid$0 = require('./StatusGrid.js');\nconst StatusGrid = StatusGrid$0.default || (StatusGrid$0['StatusGrid'] || StatusGrid$0);",s);n.exports=[{type:"markdown",content:"Status Grid visualizes the latest status for a given data stream by emphasizing the current status of a property.\n\nThe color of the status grid is determined by the threshold color. If no threshold is provided or no status is\nbreaching the threshold, then the default color is grey.\n\nRegardless of the threshold color you provided, the color of the text will contrast for you automatically.\n\nThe status grid also provides a way for you to show or hide the name, the value and/or the unit through the labels' config.\n\nBelow is an example of status grid without threshold"},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@amzn/bp-components';\n\n<div style={{ width: '100%', height: '100%' }}>\n  <StatusGrid\n    dataStreams={[\n      {\n        id: 'wind-temperture',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0),\n          y: 15,\n        }],\n        unit: 'C', \n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'motor-rpm',\n        name: 'Motor RPM',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n    ]}\n    labelsConfig={{ showName: true, showValue: true, showUnit: true }}\n    widgetId=\"widget-id\"\n    viewPort={{ duration: 0, iyMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Status grid with threshold\n\nHere is an example of a status grid breaching a blue threshold.\n\nWhile it is breached, it will color the cell with threshold color to indicate that the threshold is breached. If there is\na threshold and that threshold is not breached, the color of the cell will remain grey.\n\nThe color of the text is automatically set to white or black to provide readability depending on the background color."},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@amzn/bp-components';\n\n<div style={{ width: '100%', height: '100%' }}>\n  <StatusGrid\n    dataStreams={[\n      {\n        id: 'wind-temperture',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C', \n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'motor-rpm',\n        name: 'Motor RPM',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      }\n    ]}\n    labelsConfig={{ showName: true, showValue: true, showUnit: true }}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#0073bb',\n        value: 0,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      },\n      {\n        color: '#1d8102',\n        value: 25,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }],\n    }}\n    viewPort={{ duration: 0, iyMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'### Status grid with alarm\n\nThis is an example of status grid with alarm data stream.\n\nWhen you have an alarm data stream that is associated with another data stream, it will be combined into one single\nstatus grid cell to display both information in a single place. It will emphasize the alarm status while indicating the\nassociated property value.\n\nTo associate a data stream to an alarm data stream, you will need to specify the `associatedDataStream` property for\nthe property data stream to provide it with the association to the alarm.\n\nAn example of an association:\n\n```jsx\n    dataStreams<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token operator">...</span>  \n        associatedDataStream<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            id<span class="token operator">:</span> <span class="token string">\'alarm-data-stream-id\'</span><span class="token punctuation">,</span>\n            type<span class="token operator">:</span> <span class="token string">\'ALARM\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">}</span>\n```\n\nHovering over the status grid will give you more in-depth information about the data value as well as the alarm status.'},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StreamType } from '@amzn/bp-components';\n\n<div style={{ width: '100%', height: '100%' }}>\n  <StatusGrid\n    dataStreams={[\n      {\n        id: 'car-speed',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n        associatedStreams: [{\n          id:'car-speed-alarm',\n          type: StreamType.ALARM,\n        }]\n      },\n      {\n        id: 'car-speed-alarm',\n        name: 'Car Speed Alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'Warning',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      }\n    ]}\n    labelsConfig={{ showName: true, showValue: true, showUnit: true }}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        dataStreamIds: ['car-speed-alarm']\n      }],\n    }}\n    viewPort={{ duration: 0, iyMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Status grid with multiple data streams\n\nBelow is an example of how status grid show multiple data streams"},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StreamType } from '@amzn/bp-components';\n\n<div style={{ width: '100%', height: '100%' }}>\n  <StatusGrid\n    dataStreams={[\n      {\n        id: 'wind-temperture',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C', \n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n        associatedStreams: [{\n          id:'car-speed-alarm',\n          type: StreamType.ALARM,\n        }]\n      },\n      {\n        id: 'car-speed-alarm',\n        name: 'Car Speed Alarm',\n        color: '#ff9900',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'Warning',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'motor-rpm',\n        name: 'Motor RPM',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n    ]}\n    labelsConfig={{ showName: true, showValue: true, showUnit: true }}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#1d8102',\n        value: 0,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      },\n        {\n          color: '#d13212',\n          value: 25,\n          comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n        },\n        {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        dataStreamIds: ['car-speed-alarm']\n      }],\n    }}\n    viewPort={{ duration: 0, iyMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n  />\n</div>",settings:{},evalInContext:o}]},827:function(n,t,e){n.exports={doclets:{},displayName:"StatusTimeline",methods:[],props:[],examples:e(828)}},828:function(n,t,e){var a={"@amzn/bp-components":e(49),react:e(1),"./StatusTimeline.js":e(191)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst StatusTimeline$0 = require('./StatusTimeline.js');\nconst StatusTimeline = StatusTimeline$0.default || (StatusTimeline$0['StatusTimeline'] || StatusTimeline$0);",s);n.exports=[{type:"markdown",content:'Status timeline visualizes statuses across a period of time for one or more data streams.\n\nEach bar in the status timeline represents a period of the time that the associated data point that is active.\n\nThe color of the bar is determined by the threshold that is considered breached by the data point. If no data is breaching\nthe threshold, the default color is grey.\n\nIf there is no data point in a given point in time, the chart will display grey stripe to indicate no value.\n\nBelow is an example of utilizing the following threshold to color the status timeline.\nNote that also the threshold rules will be used to determine the legend.\n\n```jsx\n  annotations<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token string">\'#d13212\'</span><span class="token punctuation">,</span>\n      value<span class="token operator">:</span> <span class="token string">\'Critical\'</span><span class="token punctuation">,</span>\n      comparisonOperator<span class="token operator">:</span> <span class="token constant">COMPARISON_OPERATOR</span><span class="token punctuation">.</span><span class="token constant">EQUAL</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token string">\'#ff9900\'</span><span class="token punctuation">,</span>\n      value<span class="token operator">:</span> <span class="token string">\'Warning\'</span><span class="token punctuation">,</span>\n      comparisonOperator<span class="token operator">:</span> <span class="token constant">COMPARISON_OPERATOR</span><span class="token punctuation">.</span><span class="token constant">EQUAL</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token string">\'#1d8102\'</span><span class="token punctuation">,</span>\n      value<span class="token operator">:</span> <span class="token string">\'Normal\'</span><span class="token punctuation">,</span>\n      comparisonOperator<span class="token operator">:</span> <span class="token constant">COMPARISON_OPERATOR</span><span class="token punctuation">.</span><span class="token constant">EQUAL</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span>\n```'},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StreamType } from '@amzn/bp-components';\nconst MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '300px' }}>\n  <StatusTimeline\n    alarms={{expires: undefined}}\n    dataStreams={[\n      {\n        id: 'car-speed-alarm',\n        name: 'Car Speed Alarm',\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 'Normal',\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 'Warning',\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 'Critical',\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 'Warning',\n          }, {\n            x: new Date(2000, 9, 15).getTime(),\n            y: 'Normal',\n          }]\n        },\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#d13212',\n        value: 'Critical',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }, {\n        color: '#1d8102',\n        value: 'Normal',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }],\n    }}\n    legend= {{\n      width: 100,\n      position: LEGEND_POSITION.BOTTOM,\n    }}\n    viewPort={{ yMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 6, 0) }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'### Configuring status expiration\n\nThe status timeline allows customization of how long a data point is considered active.\nThis is achieved by providing an alarms object with `expires` property in milliseconds.\n\nIn the first example above we demonstrate a case where status never expires, i.e. when `expires` is `undefined`.\nIf a data point has a given value associated with no expiration, then the data point is considered active until a new data point occurs.\n\nHowever, if we want to have a data point to be considered active for a set period of a time, we can provide the alarm\'s `expires` in milliseconds.\nIn this case, the data is considered expired, when either the point in time is further away from the expired time, or a new data point occurs.\n\nBelow is an example of one month expiration.\n\n```jsx\nalarms<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>expires<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n```'},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StreamType } from '@amzn/bp-components';\nconst MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '300px' }}>\n  <StatusTimeline\n    alarms={{expires: 1000 * 60 * 60 * 24 * 30 }}\n    dataStreams={[\n      {\n        id: 'car-speed-alarm',\n        name: 'Car Speed Alarm',\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 'Normal',\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 'Warning',\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 'Critical',\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 'Warning',\n          }, {\n            x: new Date(2000, 9, 15).getTime(0),\n            y: 'Normal',\n          }]\n        },\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#d13212',\n        value: 'Critical',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }, {\n        color: '#1d8102',\n        value: 'Normal',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }],\n    }}\n    legend= {{\n      width: 100,\n      position: LEGEND_POSITION.BOTTOM,\n    }}\n    viewPort={{ yMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 6, 0) }}\n  />\n</div>",settings:{},evalInContext:o}]},829:function(n,t,e){n.exports={doclets:{},displayName:"Table",methods:[],props:[],examples:e(830)}},830:function(n,t,e){var a={"@amzn/bp-components":e(49),react:e(1),"./Table.js":e(192)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst Table$0 = require('./Table.js');\nconst Table = Table$0.default || (Table$0['Table'] || Table$0);",s);n.exports=[{type:"markdown",content:'Visualizes the latest value or status with one or more data streams on a table format\n\nTable components help visualizes a group of data streams that is closely associated with each other under one column.\nEach of the cells in the table represents one data stream. You have to use the `tableColumns` property to group a\nset of data streams under one column.\n\nAn example of creating the table column:\n\n```jsx\n<span class="token keyword">const</span> windTableColumn <span class="token operator">=</span> <span class="token punctuation">{</span>\n  header<span class="token operator">:</span> <span class="token string">\'Wind Temperture\'</span><span class="token punctuation">,</span>\n  rows<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'wind-temperture-station-1\'</span><span class="token punctuation">,</span> <span class="token string">\'wind-temperture-station-2\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n```\n\nThe `header` property is the name of the column and the `rows` property is a list of data streams that will be rendered under that\ncolumn in the array\'s order.\n\nIn this example, we are showing temperatures from two different weather stations.'},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@amzn/bp-components';\nconst windTableColumn = {\n  header: 'Wind Temperture',\n  rows:[\n    'wind-temperture-station-1',\n    'wind-temperture-station-2',\n    'wind-temperture-station-3',\n    'wind-temperture-station-4',\n    'wind-temperture-station-5',\n    'wind-temperture-station-6',\n  ],\n};\n\nconst carSpeedTableColumn = {\n  header: 'Car Temperture',\n  rows:[\n    'car-speed',\n    'car-speed-2',\n    'car-speed-3',\n    'car-speed-4',\n    'car-speed-5',\n    'car-speed-6',\n  ],\n};\n\n<div style={{ width: '100%', height: '300px' }}>\n  <Table\n    dataStreams={[\n      {\n        id: 'wind-temperture-station-1',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-2',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-3',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 40,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-4',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-5',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 60,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-6',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 70,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-2',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 100,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-3',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 110,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-4',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 120,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-5',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 130,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-6',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 160,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      }\n    ]}\n    widgetId=\"widget-id\"\n    viewPort={{ duration: 0, yMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n    tableColumns={[windTableColumn, carSpeedTableColumn]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Table with thresholds\n\nIn the above example, the numbers are all in black, which is the default color.\nWe can add thresholds to change the color of the text."},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@amzn/bp-components';\nconst windTableColumn = {\n  header: 'Wind Temperture',\n  rows:[\n    'wind-temperture-station-1',\n    'wind-temperture-station-2',\n    'wind-temperture-station-3',\n    'wind-temperture-station-4',\n    'wind-temperture-station-5',\n    'wind-temperture-station-6',\n  ],\n};\n\nconst carSpeedTableColumn = {\n  header: 'Car Temperture',\n  rows:[\n      'car-speed', \n    'car-speed-2',\n    'car-speed-3',\n    'car-speed-4',\n    'car-speed-5',\n    'car-speed-6',\n  ],\n};\n\n<div style={{ width: '100%', height: '300px' }}>\n  <Table\n    dataStreams={[\n      {\n        id: 'wind-temperture-station-1',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-2',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-3',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 40,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-4',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-5',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 60,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-6',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 70,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-2',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 100,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-3',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 110,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-4',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 120,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-5',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 130,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-6',\n        name: 'Car Speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 160,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      }\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#d13212',\n        value: 0,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 20,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#1d8102',\n        value: 40,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#687078',\n        value: 60,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#3184c2',\n        value: 100,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#FF0000',\n        value: 120,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#1d8102',\n        value: 160,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }],\n    }}\n    legend= {{\n      width: 100,\n      position: LEGEND_POSITION.BOTTOM,\n    }}\n    viewPort={{ duration: 0, yMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n    tableColumns={[windTableColumn, carSpeedTableColumn]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Table with alarms\n\nIn this example we are rending the category `wind temperature` and its alarm data streams side by side.\n\nIn order to have the status icon rendered next to the alarm status, you need to use the `icon` property in the threshold.\n\nLike the KPI, table status icon currently supports:\n\n1.  error\n2.  active\n3.  normal\n4.  acknowledged\n5.  snoozed\n6.  disabled\n7.  latched"},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StatusIcon, StreamType } from '@amzn/bp-components';\nconst windTableColumn = {\n    header: 'Wind Temperture',\n    rows:[\n      'wind-temperture-station-1', \n      'wind-temperture-station-2',\n      'wind-temperture-station-3',\n      'wind-temperture-station-4',\n      'wind-temperture-station-5',\n      'wind-temperture-station-6',\n    ],\n};\n\nconst carSpeedTableColumn = {\n  header: 'Status',\n  rows:[\n    'wind-temperture-station-1-alarm', \n    'wind-temperture-station-2-alarm',\n    'wind-temperture-station-3-alarm',\n    'wind-temperture-station-4-alarm',\n    'wind-temperture-station-5-alarm',\n    'wind-temperture-station-6-alarm',\n  ],\n};\n\n<div style={{ width: '100%', height: '300px' }}>\n  <Table\n    dataStreams={[\n      {\n        id: 'wind-temperture-station-1',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-2',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-3',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 40,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-4',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-5',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 60,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-6',\n        name: 'Wind Temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 70,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-1-alarm',\n        name: 'station 1 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'ACTIVE',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'wind-temperture-station-2-alarm',\n        name: 'station 2 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'WARNING',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'wind-temperture-station-3-alarm',\n        name: 'station 3 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'ERROR',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'wind-temperture-station-4-alarm',\n        name: 'station 4 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'NORMAL',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'wind-temperture-station-5-alarm',\n        name: 'station 5 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'SNOOZED',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'wind-temperture-station-6-alarm',\n        name: 'station 6 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'DISABLED',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#d13212',\n        value: 'ACTIVE',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.ACTIVE\n      }, {\n        color: '#ff9900',\n        value: 'WARNING',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.LATCHED\n      }, {\n        color: '#FF0000',\n        value: 'ERROR',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.ERROR\n      }, {\n        color: '#1d8102',\n        value: 'NORMAL',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.NORMAL\n      }, {\n        color: '#879596',\n        value: 'SNOOZED',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.SNOOZED\n      }, {\n        color: '#687078',\n        value: 'DISABLED',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.DISABLED\n      }],\n    }}\n    legend= {{\n      width: 100,\n      position: LEGEND_POSITION.BOTTOM,\n    }}\n    viewPort={{ duration: 0, yMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 0, 0) }}\n    tableColumns={[windTableColumn, carSpeedTableColumn]}\n  />\n</div>",settings:{},evalInContext:o}]},831:function(n,t,e){n.exports={doclets:{},displayName:"WebglContext",methods:[],props:[],examples:e(832)}},832:function(n,t,e){var a={react:e(1),"./WebglContext.js":e(193)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst WebglContext$0 = require('./WebglContext.js');\nconst WebglContext = WebglContext$0.default || (WebglContext$0['WebglContext'] || WebglContext$0);",s),n.exports=[{type:"markdown",content:'Basic Usage:\n\n```jsx\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WebglContext</span></span> <span class="token punctuation">/></span></span>\n```\n\nThis creates a single shared canvas and WebGL rendering context for use on all WebGL widgets.\n\nThis solves two problems:\n\n1.  Having a lot of WebGL contexts is very expensive from a performance perspective.\n2.  Related to the performance considerations, browsers will limit the number of contexts you can have.\n    *   https://bugzilla.mozilla.org/show_bug.cgi?id=1421481\n    *   https://bugs.chromium.org/p/chromium/issues/detail?id=771792\n\nTo get around that, we share a single WebGL renderer across all widgets.\n\n### Pitfalls\n\n#### Positioning (z-depth)\n\n**Make sure your context has the correct z-depth**: Make sure the context is positioned in such a location which\nplaces it in the correct depth context ensuring you can see your data in the expected manner.\n\n#### Data Not Appearing in Bottom/Right Margins\n\nThe context stretches the entire screen minus 16 pixels on the bottom and right side of the browser.\nThis is due to the potential of scrollbars being present. This means data will not appear at this 16px margin.'}]},833:function(n,t,e){var a={react:e(1)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:'*   `widgetId`: string\n\n    The ID of the widget. Must be unique across all widgets.\n\n***\n\n*   `viewPort`: Object\n\n    Specifies the window of data which will be visible within the widget.\n\n    *   `start`: Date\n\n        The earliest date within the viewport.\n\n    *   `end`: Date\n\n        The latest date within the viewport.\n\n    *   `yMin`: number\n\n        (Optional) The minimum y-value viewable within the widget if present. Defaults to a value small enough to ensure\n        all data within the viewport falls at or above the provided `yMin`.\n\n    *   `yMax`: number\n\n        (Optional) The maximum y-value viewable within the widget if present. Defaults to a value large enough to ensure\n        all data within the viewport falls at or below the provided `yMax`.\n\n    *   `lastUpdatedBy`: string\n\n        (Optional) A mechanism to allow the internals of the widget framework to know the source of the last viewport update.\n        Leave this field undefined to communicate that this is an externally provided date which should force the utilization of this updated viewport.\n\n        Note: To be deprecated\n\n    *   `duration`: number\n\n        (Optional) The number of milliseconds the duration of the viewport is. Utilized to specify a live time frame. Leave blank when viewing historical time frames.\n\n    *   `group`: string\n\n        (Optional) The identifier for the viewport group which the widget will belong to. All widgets within a viewport group\n        will have their viewports \'synced\' to the same value, i.e. if you pan on one chart, all charts within\n        the viewport group will view the same data.\n\n        Omitting the `group` results in the widget not being part of any viewport group.\n\n***\n\n*   `axis`: Object\n\n    (Optional) Specifies x and y-axis related settings. Defaults to showing both x and y axis.\n\n    *   `showX`: boolean\n\n        (Optional) Setting to determine whether we show the x axis. Defaults to true.\n\n    *   `showY`: boolean\n\n        (Optional) Setting to determine whether we show the y axis and the horizontal grid lines. Defaults to true.\n\n    *   `labels`: object\n\n        (Optional) Setting to declare the axis labels\n\n        *   `yAxis`: object\n\n            (Optional) Settings to declare the y-axis labels\n\n            *   `content`: string\n\n                The y-axis label content\n\n***\n\n*   `size` : Object\n\n    (Optional): Specifies the precise dimensions that the widget should be. Defaults to take the size of the parent container.\n    If margins are not manually set, they will default to reasonable values that work well with the legend.\n\n    **Warning**: If you are not explicitly providing a size, it is important that the parent of the widget\n    contains no other children; otherwise, styling issues will occur due to overflow.\n\n    *   `width`: number\n\n        (Optional) The width of the entire widget, including margins, in pixels.\n\n    *   `height`: number\n\n        (Optional) The height of the entire widget, including margins, in pixels.\n\n    *   `marginRight`: number\n\n        (Optional) The margin between the data visualization area and either the legend (if the legend is positioned to the right) or the right side of the widget.\n        Starts at the right side of the viewport. Defaults to a value which provides sensible padding.\n\n    *   `marginLeft`: number\n\n        (Optional) The margin between the data visualization area and the left side of the chart.\n        Starts at the left side of the viewport. Provides space for the left-sided y axis.\n\n    *   `marginTop`: number\n\n    (Optional) The margin between the data visualization area and the top of the widget.\n    Starts at the top of the viewport.\n\n    *   `marginBottom`: number\n\n    (Optional) The margin between the data visualization area and either the legend (if the legend is positioned to the bottom) or the bottom of the widget.\n    Starts at the bottom of the viewport. Defaults to a value which provides sensible padding.\n\n***\n\n*   `dataStreams`: Object\\[]\n\n    A collection of data streams, each representing a single data set.\n\n    Each data stream contains the following information:\n\n    *   `id`: string\n\n        A unique identifier for a given data stream.\n\n    *   `data`: Object\\[]\n\n        Raw data (non-aggregated) for the stream. Note that once `resolution` is greater than 0, then it will switch from\n        reading the data from this `data` property to reading the data from the `aggregates` property.\n\n        *   `x`: Date\n\n            Represents the point in time at which the data point was measured.\n\n        *   `y`: number\n\n            The value measured within the data point.\n\n    *   `resolution`: number\n\n        The resolution, in milliseconds, at which the data should be aggregated.\n        To display raw data, set the resolution to 0.\n\n    *   `dataType`: string\n\n        The type of data contained within this stream. Must match it\'s respective `dataStreamInfo`. Must be one of the following:\n\n        *   `NUMBER`: numerical data, such as `12.0`\n        *   `STRING`: string data, such as categorical data `"OK"`, `"WARNING"`, etc.\n        *   `BOOLEAN`: boolean data, such as `true` and `false`.\n\n    *   `name`: string\n\n        A name by which to refer to the data stream. Utilized in the legend.\n\n    *   `aggregates`: Object\n\n        (Optional) A map of resolution (in milliseconds) to its associated data points. The `resolution` in the `datastream`\n        is a key in the `aggregates` object and must match to one of them in order to visualize the data stream on the visualizations.\n\n        *   `resolution` (key): number\n            The resolution (in milliseconds) of the data.\n\n            *   data point(value): DataPoint\\[]\n                The data points that are associated to this resolution.\n\n    *   `detailedName`: string\n\n        (Optional) A more detailed name for the associated data stream, shown while hovering over the data stream information within the legend.\n\n    *   `unit`: string\n\n        (Optional) The measurement unit of the y-values contained within the associated data stream, e.g. "m/s", "count".\n        Utilized within the legend, etc. to give information about the data.\n\n    *   `color`: string\n\n        (Optional) A CSS color string, e.g. "#5e87b5" or "red".\n\n    *   `isLoading`: boolean\n\n        (Optional) Whether the data stream has never fetched data previously, and is currently fetching data. Defaults to false.\n\n    *   `isRefreshing`: boolean\n\n        (Optional) Whether the data stream is currently fetching data, regardless of whether it has fetched data previously. Defaults to false.\n\n    *   `error`: string\n\n        (Optional) A readable human error message if the data source this data stream is associated to has an error.\n\n    *   `associatedDataStreams`: Object\\[]\n\n        (Optional) Data streams that are associated alarms of the data streams.\n\n        *   `id`: string\n\n            The unique identifier for the data stream that is associated.\n\n        *   `streamType`: string\n\n            The data stream type for the associated data stream.\n\n            Must be one of the following:\n\n            *   `ALARM`: Alarm data stream type.\n            *   `ANOMALY`: Anomaly data string type.\n\n***\n\n*   `legend`: Object\n\n    (Optional) Legend configuration. Omit to have no legend.\n\n    *   `position`: string\n\n        The position of the legend within the widget. Must be one of the following:\n\n        *   `RIGHT`: Position the legend on the right portion of the widget.\n        *   `BOTTOM`: Position the legend on the bottom portion of the widget.\n    *   `width`: number\n\n        Width in pixels of the legend while in the `RIGHT` position. Has no effect while in the `BOTTOM` position.\n\n***\n\n*   `annotations`: Object\n\n    (Optional) Annotations provide a mechanism to annotate a value along either the x-axis or the y-axis.\n    Utilized to create thresholds to help monitor data streams to be within specified constraints.\n\n    *   `x`: Object\\[]\n\n    (Optional) A collection of x-annotations. An x-annotation provides a mechanism to annotate a value along the x-axis.\n\n    Each x-annotation contains the following information:\n\n    *   `color`: string\n\n        The color for the annotation line, value and label. Can be any valid CSS string, e.g. \'#333\' or \'red\'.\n\n    *   `value`: Date\n\n        The value in the graph where the annotation will appear.\n\n    *   `showValue`: boolean\n\n        (Optional) A setting to display the value of the annotation on the graph. Defaults to false.\n\n    *   `label`: Object\n\n        (Optional) a label which can be optionally displayed.\n\n        A label contains the following properties:\n\n        *   `text`: string\n\n            A string that appears above the annotation.\n\n        *   `show`: boolean\n\n            A setting to display the label of the annotation on the graph. Defaults to false.\n\n    *   `y`: Object\\[]\n\n        (Optional) collection of y-annotations. A y-annotation provides a mechanism to annotate a value along the y-axis.\n\n        Each y-annotation contains the following information:\n\n        *   `color`: string\n\n            The color for the annotation line, value and label. Can be any valid CSS string, e.g. \'#333\' or \'red\'.\n\n        *   `value`: number\n\n            The value in the graph where the annotation will appear.\n\n        *   `showValue`: boolean\n\n            (Optional) A setting to display the value of the annotation on the graph.\n\n        *   `comparisonOperator`: string\n\n            (Optional) A mechanism to provide a threshold. Select the operation you want to use for the threshold condition\n            against the annotations `value` attribute.\n\n            Must be one of the following:\n\n            *   `LT`: Less than.\n            *   `LTE`: Less than or equals.\n            *   `GT`: Greater than.\n            *   `GTE`: Greater than or equals.\n            *   `EQ`: Equal.\n\n        *   `label`: Object\n\n            (Optional) a label which can be optionally displayed.\n\n            A label contains the following properties:\n\n            *   `text`: string\n\n                A string that appears above the annotation.\n\n            *   `show`: boolean\n\n                A setting to display the label of the annotation on the graph.\n*   `thresholdOptions`: Object or Boolean\n\n    (Optional) An threshold objects object to configure the thresholds. This setting will applie to all the thresholds.\n    Also, note that you can pass in `false` to disable all threshold options\n\n    *   `showColor`: boolean\n        (Optional) A setting to color the data points when it passes the threshold\n\n***\n\n*   `trends`: Object\\[]\n\n    (Optional) A collection of trend lines to be visualized on the data in the viewport.\n\n    Each trend line contains the following information:\n\n    *   `dataStreamId`: string\n\n        The ID of the associated data stream. If this ID does not match any data stream, the trend line will be ignored.\n\n    *   `type`: string\n\n        The type of trend line to apply against the data. Must be equal to one of the following strings:\n\n        *   `linear-regression`: Least-squares linear regression algorithm to determine the line of best fit against the data.'}]},834:function(n,t,e){var a={"@amzn/react-synchro-charts":e(8),react:e(1)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"markdown",content:"Utilizing the `group` property within the `viewport` API, we can define a group of charts which will stay in sync.\n\nBelow is an example of three synchronized charts:\n\nNOTE: This is achieved by giving each of the three charts the same `group` value. If this attribute is not provided, no synchronization will occur."},{type:"code",content:"import { LineChart } from \"@amzn/react-synchro-charts\";\n\nconst DAY_RESOLUTION = 1000 * 60 * 60 * 24; // one day\n<div style={{ width: \"900px\", height: \"400px\", display: \"flex\" }}>\n  <div style={{ width: \"300px\", height: \"400px\" }}>\n    <LineChart\n      widgetId=\"chart-1\"\n      viewPort={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 0, 0),\n        group: 'my-group',\n      }}\n      dataStreams={[\n        {\n          id: 'car-count',\n          dataType: 'NUMBER',\n          color: '#1d8102',\n          name: 'Car Count',\n          resolution: DAY_RESOLUTION, // one day\n          aggregates: {\n            [DAY_RESOLUTION]: [\n              {\n                x: new Date(2000, 1, 0).getTime(),\n                y: 7,\n              },\n              {\n                x: new Date(2000, 3, 0).getTime(),\n                y: 18,\n              },\n              {\n                x: new Date(2000, 4, 0).getTime(),\n                y: 11,\n              },\n              {\n                x: new Date(2000, 5, 0).getTime(),\n                y: 30,\n              },\n              {\n                x: new Date(2000, 7, 0).getTime(),\n                y: 16,\n              },\n              {\n                x: new Date(2000, 8, 0).getTime(),\n                y: 26,\n              },\n              {\n                x: new Date(2000, 10, 0).getTime(),\n                y: 46,\n              },\n              {\n                x: new Date(2000, 11, 0).getTime(),\n                y: 100,\n              },\n            ]\n          }\n        },\n      ]}\n    />\n  </div>\n\n  <div style={{ width: \"300px\", height: \"400px\" }}>\n    <LineChart\n      widgetId=\"chart-2\"\n      viewPort={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 0, 0),\n        group: 'my-group',\n      }}\n      dataStreams={[\n        {\n          id: 'car-count',\n          dataType: 'NUMBER',\n          color: 'purple',\n          name: 'Car Count',\n          resolution: DAY_RESOLUTION, // one day\n          aggregates: {\n            [DAY_RESOLUTION]: [\n              {\n                x: new Date(2000, 1, 0).getTime(),\n                y: 7,\n              },\n              {\n                x: new Date(2000, 3, 0).getTime(),\n                y: 18,\n              },\n              {\n                x: new Date(2000, 4, 0).getTime(),\n                y: 11,\n              },\n              {\n                x: new Date(2000, 5, 0).getTime(),\n                y: 30,\n              },\n              {\n                x: new Date(2000, 7, 0).getTime(),\n                y: 16,\n              },\n              {\n                x: new Date(2000, 8, 0).getTime(),\n                y: 26,\n              },\n              {\n                x: new Date(2000, 10, 0).getTime(),\n                y: 46,\n              },\n              {\n                x: new Date(2000, 11, 0).getTime(),\n                y: 100,\n              },\n            ]\n          }\n        },\n      ]}\n    />\n  </div>\n  <div style={{ width: \"300px\", height: \"400px\" }}>\n    <LineChart\n      widgetId=\"chart-3\"\n      viewPort={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 0, 0),\n        group: 'my-group',\n      }}\n      dataStreams={[\n        {\n          id: 'car-count',\n          dataType: 'NUMBER',\n          color: 'red',\n          name: 'Car Count',\n          resolution: DAY_RESOLUTION, // one day\n          aggregates: {\n            [DAY_RESOLUTION]: [\n              {\n                x: new Date(2000, 1, 0).getTime(),\n                y: 7,\n              },\n              {\n                x: new Date(2000, 3, 0).getTime(),\n                y: 18,\n              },\n              {\n                x: new Date(2000, 4, 0).getTime(),\n                y: 11,\n              },\n              {\n                x: new Date(2000, 5, 0).getTime(),\n                y: 30,\n              },\n              {\n                x: new Date(2000, 7, 0).getTime(),\n                y: 16,\n              },\n              {\n                x: new Date(2000, 8, 0).getTime(),\n                y: 26,\n              },\n              {\n                x: new Date(2000, 10, 0).getTime(),\n                y: 46,\n              },\n              {\n                x: new Date(2000, 11, 0).getTime(),\n                y: 100,\n              },\n            ]\n          }\n        },\n      ]}\n    />\n  </div>\n</div>;",settings:{},evalInContext:o},{type:"markdown",content:'### How To Synchronize\n\nThe default behavior of a chart is to not synchronize with any other charts. To opt into synchronizing with a group of charts, simply pass in a matching `group` string in the `viewport`.\n\n```jsx\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-1<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewPort</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-2<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewPort</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n```\n\nAny number of view port groups may be defined, such as below:\n\n```jsx\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-1<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewPort</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-2<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewPort</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-3<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewPort</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-second-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-4<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewPort</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-second-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n```\n\nHere we have defined two `group`s: `my-group` and `my-second-group`.\n\nWhen you interact with one chart within a view port group, all the charts will stay in sync.'}]},835:function(n,t,e){var a={"@amzn/react-synchro-charts":e(8),react:e(1)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"markdown",content:"Performance is a key goal of Synchro charts - we wish to allow people to visualize lots of data across many charts, while retaining a smooth user experience.\n\nInteract with the charts below using the following gestures:\n\n*   **Pan**: hold **shift**, click and drag on any chart\n*   **Zoom In**: **double-click** on a position within a chart to zoom into that area.\n*   **Zoom Out**: hold **shift** and **double-click** on a position within a chart to zoom away from that area.\n*   **Restrict Time Span**: Click and drag through the interval of time you wish to restrict the viewport to.\n\nBelow is an example of synchronizing a group of charts containing half a million data points synchronized across 9 charts:"},{type:"code",content:"import { ScatterChart } from \"@amzn/react-synchro-charts\";\n\nconst NUM_CHARTS = 9;\nconst NUM_POINTS = Math.round(500000 / NUM_CHARTS);\nconst TIME_SPAN = 1000 * 60 * 60 * 24 * 20;\n\n<div style={{ width: \"910px\", height: \"1200px\", display: \"flex\", \"flexWrap\": 'wrap' }}>\n{\nnew Array(3 * 3).fill(null).map((_, i) => {\nreturn (\n  <div key={i} style={{ width: \"290px\", height: \"400px\" }}>\n    <ScatterChart\n      widgetId={`chart-${i}`}\n      size={{ marginRight: 10 }}\n      viewPort={{\n        yMin: -250,\n        yMax: 250,\n        start: new Date(2000, 0, 0),\n        end: new Date(2000, 0, 1),\n        group: 'perf'\n      }}\n      dataStreams={[\n        {\n          id: 'car-count',\n          dataType: 'NUMBER',\n          name: 'Car Count',\n          color: i % 2 == 0 ? '#0073bb' : '#dd6b10',\n          resolution: 0,\n          /** Alter this number to change the number of data points on each chart! */\n          data: new Array(NUM_POINTS).fill(null).map((_, pointIndex) => {\n            const x = new Date(new Date(2000, 0, 0).getTime() + TIME_SPAN * (pointIndex / NUM_POINTS)).getTime();\n            return {\n              x, \n              y: Math.sin(x / 90000) * 200 + Math.random() * 40,\n            };\n          }),\n        },\n      ]}\n    />\n  </div>\n)\n})\n}\n</div>",settings:{},evalInContext:o}]},836:function(n,t,e){var a={"@amzn/react-synchro-charts":e(8),react:e(1)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"markdown",content:"Annotations allow you to visually check if a metric has crossed a pre-defined value,\nor to mark an event that has happened at a specific point in time."},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@amzn/react-synchro-charts\";\n\nconst DAY_RESOLUTION = 1000 * 60 * 60 * 24; // one day\nconst style = { width: '100%' }; \nconst annotations = {\n  y: [{\n      color: 'red',\n      value: 40,\n      showValue: true,\n  }],\n};\nconst viewPort = {\n   start: new Date(2000, 0, 0),\n   end: new Date(2001, 0, 0),\n   group: 'viewport-group',\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: '#1d8102',\n  name: 'Car Count',\n  resolution: DAY_RESOLUTION, // one day\n  aggregates: {\n    [DAY_RESOLUTION]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: 7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: 18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: 11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: 30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: 16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: 26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: 46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: 100,\n    }]\n  }\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewPort={viewPort}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <ScatterChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewPort={viewPort}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <BarChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewPort={viewPort}\n    legend={legend}\n    dataStreams={[{\n      id: 'car-count',\n      dataType: 'NUMBER',\n      resolution: 1000 * 60 * 24 * 60 * 24,\n      color: '#1d8102',\n      aggregates: {\n        [1000 * 60 * 24 * 60 * 24]: [{\n          x: new Date(2000, 1, 0).getTime(),\n          y: 7,\n        }, {\n          x: new Date(2000, 3, 0).getTime(),\n          y: 18,\n        }, {\n          x: new Date(2000, 4, 0).getTime(),\n          y: 11,\n        }, {\n          x: new Date(2000, 5, 0).getTime(),\n          y: 30,\n        }, {\n          x: new Date(2000, 7, 0).getTime(),\n          y: 16,\n        }, {\n          x: new Date(2000, 8, 0).getTime(),\n          y: 26,\n        }, {\n          x: new Date(2000, 10, 0).getTime(),\n          y: 46,\n        }, {\n          x: new Date(2000, 11, 0).getTime(),\n          y: 100,\n        }]\n      }\n    }]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'### How To Set Up Annotations\n\nSimply pass in a `Y annotation` array to visualize the Y annotation on the graph. Here is an exmaple:\n\n```jsx\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name">annotations</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n       y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n           color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n           value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n           showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n```\n\nWhen there are no thresholds, passing in the threshold options will not affect anything.\n\n```jsx\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name">annotations</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n       y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n           color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n           value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n           showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       thresholdOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n           showColor<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span>               \n     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n```'}]},837:function(n,t,e){var a={"@amzn/react-synchro-charts":e(8),react:e(1)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"markdown",content:"Threshold allows you quickly visualize if a metric is outside of a pre-defined value by coloring the physical data points on the graph.\n\nA threshold is a type of annotation; that is to say, all thresholds are annotations, but not all annotations are thresholds.\nIn order to make an annotation become a threshold, the property `comparisonOperator` is needed in the annotation object.\nUnlike an annotation, when a metric passes a threshold, the legend and the tooltip will change to the threshold color.\n\nBy default, the thresholds will have coloration enabled. Meaning, when data passes the threshold, it will change to the threshold color.\n**Note: Currently, only y-annotations can become a threshold.**"},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@amzn/react-synchro-charts\";\n\nconst DAY_RESOLUTION = 1000 * 60 * 60 * 24; // one day\nconst style = { width: '100%' }; \nconst annotations = {\n  y: [{\n      color: '#d13212',\n      value: 40,\n      showValue: true,\n      comparisonOperator: 'GTE',\n  }],\n};\nconst viewPort = {\n   start: new Date(2000, 0, 0),\n   end: new Date(2001, 0, 0),\n   group: 'threshold',\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: '#1d8102',\n  name: 'Car Count',\n  resolution: DAY_RESOLUTION, // one day\n  aggregates: {\n    [DAY_RESOLUTION]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: 7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: 18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: 11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: 30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: 16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: 26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: 46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: 100,\n    }]\n  }\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewPort={viewPort}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <ScatterChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewPort={viewPort}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <BarChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewPort={viewPort}\n    legend={legend}\n    dataStreams={[{\n      id: 'car-count',\n      dataType: 'NUMBER',\n      resolution: 1000 * 60 * 24 * 60 * 24,\n      color: '#1d8102',\n      aggregates: {\n        [1000 * 60 * 24 * 60 * 24]: [{\n          x: new Date(2000, 1, 0).getTime(),\n          y: 7,\n        }, {\n          x: new Date(2000, 3, 0).getTime(),\n          y: 18,\n        }, {\n          x: new Date(2000, 4, 0).getTime(),\n          y: 11,\n        }, {\n          x: new Date(2000, 5, 0).getTime(),\n          y: 30,\n        }, {\n          x: new Date(2000, 7, 0).getTime(),\n          y: 16,\n        }, {\n          x: new Date(2000, 8, 0).getTime(),\n          y: 26,\n        }, {\n          x: new Date(2000, 10, 0).getTime(),\n          y: 46,\n        }, {\n          x: new Date(2000, 11, 0).getTime(),\n          y: 100,\n        }]\n      }\n    }]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'### How To Set Up Thresholds\n\nBy default, annotations are not thresholds. To elevate an Y annotation into a threshold, pass in the `comparisonOperator` property.\n\n`Note`: the default behavior of a threshold is to show the color change when data points pass through a threshold.\n\n```jsx\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name">annotations</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n       y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n           color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n           value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n           showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n           comparisonOperator<span class="token operator">:</span> <span class="token string">\'GTE\'</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n```\n\nIn order to turn off the default behavior of the threshold data coloring, simply pass in `showColor: false`\n\n```jsx\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name">annotations</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n       y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n           color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n           value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n           showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n           comparisonOperator<span class="token operator">:</span> <span class="token string">\'GTE\'</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       thresholdOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n           showColor<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span>               \n     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n```\n\nAlternatively, you may pass in a boolean `false` into the `thresholdOptions` to turn off all threshold defaults.\n\n```jsx\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name">annotations</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n       y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n           color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n           value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n           showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n           comparisonOperator<span class="token operator">:</span> <span class="token string">\'GTE\'</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       thresholdOptions<span class="token operator">:</span> <span class="token boolean">false</span>          \n     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n```\n\n### Threshold breaching/chart coloration logic explained\n\nIf you have two thresholds that has the same comparison operator pointing upwards but at different value,\nthen you will create threshold bands.'},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@amzn/react-synchro-charts\";\n\nconst style = { width: '100%' }; \nconst annotations = {\n  y: [{\n    color: '#d13212',\n    value: 40,\n    showValue: true,\n    comparisonOperator: 'GTE',\n  }, {\n    color: '#ff9900',\n    value: 20,\n    showValue: true,\n    comparisonOperator: 'GTE',\n  }],\n};\nconst viewPort = {\n   start: new Date(2000, 0, 0),\n   end: new Date(2001, 0, 0),\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: 'black',\n  name: 'Car Count',\n  resolution: 1000 * 60 * 60 * 24, // one day\n  aggregates: {\n    [1000 * 60 * 60 * 24]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: 7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: 18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: 11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: 30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: 16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: 26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: 46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: 100,\n    }]\n  },\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewPort={viewPort}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"Here is an example of threshold with negative threshold values and with the same comparison operators pointing downwards."},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@amzn/react-synchro-charts\";\n\nconst style = { width: '100%' }; \nconst annotations = {\n  y: [{\n    color: '#d13212',\n    value: -40,\n    showValue: true,\n    comparisonOperator: 'LTE',\n  }, {\n    color: '#ff9900',\n    value: -20,\n    showValue: true,\n    comparisonOperator: 'LTE',\n  }],\n};\nconst viewPort = {\n   start: new Date(2000, 0, 0),\n   end: new Date(2001, 0, 0),\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: 'black',\n  name: 'Car Count',\n  resolution: 1000 * 60 * 60 * 24, // one day\n  aggregates: {\n    [1000 * 60 * 60 * 24]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: -7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: -18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: -11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: -30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: -16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: -26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: -46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: -100,\n    }]\n  },\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewPort={viewPort}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"Below is an example of two horizontal thresholds intersecting each other with opposing comparison operator.\nNotice that the upper threshold's color overrides the lower threshold's color."},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@amzn/react-synchro-charts\";\n\nconst style = { width: '100%' }; \nconst annotations = {\n  y: [{\n    color: '#d13212',\n    value: 90,\n    showValue: true,\n    comparisonOperator: 'LTE',\n  }, {\n    color: '#ff9900',\n    value: 20,\n    showValue: true,\n    comparisonOperator: 'GTE',\n  }],\n};\nconst viewPort = {\n   start: new Date(2000, 0, 0),\n   end: new Date(2001, 0, 0),\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: 'black',\n  name: 'Car Count',\n  resolution: 1000 * 60 * 60 * 24, // one day\n  aggregates: {\n    [1000 * 60 * 60 * 24]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: 7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: 18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: 11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: 30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: 16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: 26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: 46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: 100,\n    }]\n  },\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewPort={viewPort}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"This is an example of two thresholds intersecting each other with opposing comparison operator in the values below 0.\nNotice that the threshold color with greater negative value overrides the lesser negative value."},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@amzn/react-synchro-charts\";\n\nconst style = { width: '100%' }; \nconst annotations = {\n  y: [{\n    color: '#d13212',\n    value: -90,\n    showValue: true,\n    comparisonOperator: 'GTE',\n  }, {\n    color: '#ff9900',\n    value: -20,\n    showValue: true,\n    comparisonOperator: 'LTE',\n  }],\n};\nconst viewPort = {\n   start: new Date(2000, 0, 0),\n   end: new Date(2001, 0, 0),\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: 'black',\n  name: 'Car Count',\n  resolution: 1000 * 60 * 60 * 24, // one day\n  aggregates: {\n    [1000 * 60 * 60 * 24]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: -7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: -18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: -11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: -30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: -16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: -26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: -46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: -100,\n    }]\n  },\n}];\n\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewPort={viewPort}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n</div>",settings:{},evalInContext:o}]},838:function(n,t,e){var a={"@amzn/react-synchro-charts":e(8),react:e(1)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"markdown",content:"Trend lines allow you to view overall trends in the data at a glance and, in the case of regression analysis, determine how closely the data fits a specific model.\nTrend lines only make use of the data within the viewport, in addition to the two data points immediately outside of the viewport on either end.\nFurthermore, trend lines are computed on the data after aggregation at the declared resolution.\n\n**Note**: Currently we only support linear regressions for trend lines, but this may be extended in the future.\nIf there is a type that you want, please let us know!"},{type:"code",content:"import { ScatterChart } from \"@amzn/react-synchro-charts\";\n<div style={{ width: '100%', height: '500px' }}>\n  <ScatterChart\n    trends={[{\n      dataStreamId: 'car-count',\n      type: 'linear-regression',\n    }]}\n    widgetId=\"widget-id\"\n    viewPort={{\n      start: new Date(2000, 0, 0),\n      end: new Date(2001, 0, 0),\n    }}\n    legend={{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[{\n      color: '#1d8102',\n      name: 'Car Count',\n      id: 'car-count',\n      dataType: 'NUMBER',\n      resolution: 1000 * 60 * 60 * 24, // one day\n      aggregates: {\n        [1000 * 60 * 60 * 24]: [{\n          x: new Date(2000, 1, 0),\n          y: 7,\n        }, {\n          x: new Date(2000, 3, 0),\n          y: 18,\n        }, {\n          x: new Date(2000, 4, 0),\n          y: 11,\n        }, {\n          x: new Date(2000, 5, 0),\n          y: 30,\n        }, {\n          x: new Date(2000, 7, 0),\n          y: 16,\n        }, {\n          x: new Date(2000, 8, 0),\n          y: 26,\n        }, {\n          x: new Date(2000, 10, 0),\n          y: 46,\n        }, {\n          x: new Date(2000, 11, 0),\n          y: 29,\n        }]\n      },\n    }]}\n  />\n</div>",settings:{},evalInContext:o}]},839:function(n,t,e){var a={react:e(1)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:'Certain customization to the widget will cause the widget to emit `widgetUpdate` event. This event contains certain information\nabout the configuration change.\n\nBelow is an example of how you would listen for this event and act on the change.\n\n```jsx\nelement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'widgetUpdated\'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something with the newly updated widget configuration change</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\nThe widget updated event object will contain the chart\'s API. For example, an update to the data streams name, the chart\nwill emit an event that looks like this\n\n```js\n<span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token comment">// Other chart configs</span>\n  widgetId<span class="token operator">:</span> <span class="token string">\'widget-id\'</span><span class="token punctuation">,</span>  \n  dataStreams<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">\'some-stream\'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">\'updated-name\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n```\n\nNote that the `widgetId` will always guaranteed come back as part of the event object. However, for the `dataStreams`\nproperty, the `data` will be omitted.'}]},840:function(n,t,e){var a={react:e(1)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:'*   Highly interactive, supports gestures for the following:\n    *   Click and drag to select area to focus on\n    *   Shift + click and drag to pan left/right\n    *   Double click to scale in\n    *   Shift + double click to scale out\n\n*   Tooltip\n\n*   Legend with configurable positioning\n\n*   Ability to allow y-range to auto adjust based on data\n    *   To enable automatic y-range determination, simply omit a `yMin` and `yMax` from the `viewPort`\n\n*   WebGL-based rendering layer allowing for high performance on large data sets\n    *   Utilizes a single shared webGL context across all charts, removing any limitations on number of widgets, as well as not incurring a cost of having many webGL Contexts.\n\n*   Opt-in caching/data-requesting layer (provide a call back on how to request the data, the component will handle what to request, when and how)\n    *   More details on this within the "caching/request" management section\n\n*   Lazy-rendering of components allowing for large amount of data visualization widgets to remain performant\n    *   To enable lazy-rendering, simply wrap your widget in the `<monitor-lazily-load>` web-component.'}]},841:function(n,t,e){var a={react:e(1)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:"*   Data must be time series with numerical values, i.e. a data point must be `(x = timestamp, y = number)`\n*   Does not handle aggregations of data client side.\n*   Line charts will support on the scale of a half million points performantly if defined statically. Primary performance bottleneck will be on the number of charts updating simultaneously, and the amount of network requests firing."}]},842:function(n,t,e){var a={react:e(1)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:"Accessibility is a concern that the team takes seriously and plans to improve upon, but it has not yet been tackled in development.\n\n*   Colors are WCAG AA Compliant.\n*   Charts are not fully keyboard accessible - some gestures are mouse only.\n*   Data visualized within a chart is not screen reader friendly.\n*   Annotations, tooltips, and legends are all screen reader friendly."}]},843:function(n,t,e){var a={react:e(1)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:"Monitor Components are all supported broadly across all modern browsers, including IE11. Due to usage of WebGL, users with misconfigured or missing graphics drivers may face problems."}]}},[[213,9,132]]]);