{"version":3,"sources":["../node_modules/@amzn/bp-components/dist/esm-es5/monitor-webgl-bar-chart-positive-negative.entry.js","../node_modules/@amzn/bp-components/dist/esm-es5/time-cc688558.js"],"names":["X_MIN","Date","X_MAX","TEST_DATA_POINT","x","y","TEST_DATA_POINT_2","MonitorWebglBarChartPositiveNegative","hostRef","registerInstance","this","prototype","render","h","id","style","width","height","data","resolution","MINUTE_IN_MS","config","size","dataStreamInfo","color","name","viewPort","yMin","yMax","start","end","SECOND_IN_MS","HOUR_IN_MS","DAY_IN_MS","MONTH_IN_MS","YEAR_IN_MS","convertMS","milliseconds","Error","seconds","Math","floor","minute","hour","day","displayDate","date","_a","viewPortDurationMS","getTime","toLocaleString","second","hour12","month","year"],"mappings":"kJAAA,oGAKIA,EAAQ,IAAIC,KAAK,IAAM,EAAG,EAAG,EAAG,GAChCC,EAAQ,IAAID,KAAK,IAAM,EAAG,EAAG,EAAG,IAEhCE,EAAkB,CAClBC,EAAG,IAAIH,KAAK,IAAM,EAAG,EAAG,EAAG,GAC3BI,EAAG,IAEHC,EAAoB,CACpBF,EAAG,IAAIH,KAAK,IAAM,EAAG,EAAG,EAAG,GAC3BI,GAAI,IAEJE,EAAsD,WACtD,SAASA,EAAqCC,GAC1CC,YAAiBC,KAAMF,GAmB3B,OAjBAD,EAAqCI,UAAUC,OAAS,WACpD,OAAQC,YAAE,MAAO,CAAEC,GAAI,kBAAmBC,MAAO,CAAEC,MAAO,QAASC,OAAQ,UAAaJ,YAAE,oBAAqB,CAAEK,KAAM,CAAC,CAAEJ,GAAI,OAAQI,KAAM,CAACf,EAAiBG,GAAoBa,WAAYC,MAAiBC,OAAQ,CAC/MP,GAAI,UACJQ,KAAM,CACFN,MAAO,IACPC,OAAQ,KAEZM,eAAgB,CACZ,CACIT,GAAI,OACJU,MAAO,QACPC,KAAM,gBAGdC,SAAU,CAAEC,MA/BhB,IA+B6BC,KA9B7B,IA8B0CC,MAAO7B,EAAO8B,IAAK5B,MACvDW,YAAE,wBAAyB,QAElCN,EArB+C,I,gCChB1D,oRAAIwB,EAAe,IACfX,EAAe,GAAKW,EACpBC,EAAa,GAAKZ,EAClBa,EAAY,GAAKD,EAEjBE,EAAc,GAAKD,EACnBE,EAAa,GAAKD,EAyBlBE,EAAY,SAAUC,GACtB,GAAIA,EAAe,EACf,MAAM,IAAIC,MAAM,4BAEpB,IAAIC,EAAUC,KAAKC,MAAMJ,EAAe,KACpCK,EAASF,KAAKC,MAAMF,EAAU,IAC9BI,EAAOH,KAAKC,MAAMC,EAAS,IAK/B,MAAO,CACHE,IALMJ,KAAKC,MAAME,EAAO,IAMxBA,KAHJA,GAAQ,GAIJD,OALJA,GAAU,GAMNH,QAPJA,GAAW,KAUXM,EAAc,SAAUC,EAAM3B,EAAY4B,GAC1C,IAAIlB,EAAQkB,EAAGlB,MAAOC,EAAMiB,EAAGjB,IAC/B,GAAIX,EAAac,EAAW,CACxB,IAAIe,EAAqBlB,EAAImB,UAAYpB,EAAMoB,UAC/C,OAAID,EAAqB5B,EACd0B,EAAKI,eAAe,QAAS,CAChCR,OAAQ,UACRS,OAAQ,YAGZH,EAAqB,GAAK5B,EACnB0B,EAAKI,eAAe,QAAS,CAChCP,KAAM,UACND,OAAQ,UACRS,OAAQ,UACRC,QAAQ,IAGTN,EAAKI,eAAe,QAAS,CAChCP,KAAM,UACND,OAAQ,UACRU,QAAQ,IAGhB,OAAIjC,GAAca,EACPc,EAAKI,eAAe,QAAS,CAChCP,KAAM,UACNC,IAAK,OACLQ,QAAQ,IAGZjC,GAAcc,EACPa,EAAKI,eAAe,QAAS,CAChCN,IAAK,UACLS,MAAO,SAGRP,EAAKI,eAAe,QAAS,CAChCI,KAAM,UACND,MAAO","file":"static/js/stencil-monitor-webgl-bar-chart-positive-negative-entry-js.f0e30928.chunk.js","sourcesContent":["import { r as registerInstance, h } from './index-326b73e4.js';\nimport { M as MINUTE_IN_MS } from './time-cc688558.js';\n// viewport boundaries\nvar Y_MIN = -100;\nvar Y_MAX = 100;\nvar X_MIN = new Date(2000, 0, 0, 0, 0);\nvar X_MAX = new Date(2000, 0, 0, 0, 10);\n// test data point dead center of the viewport\nvar TEST_DATA_POINT = {\n    x: new Date(2000, 0, 0, 0, 3),\n    y: 50,\n};\nvar TEST_DATA_POINT_2 = {\n    x: new Date(2000, 0, 0, 0, 7),\n    y: -50,\n};\nvar MonitorWebglBarChartPositiveNegative = /** @class */ (function () {\n    function MonitorWebglBarChartPositiveNegative(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    MonitorWebglBarChartPositiveNegative.prototype.render = function () {\n        return (h(\"div\", { id: \"chart-container\", style: { width: '500px', height: '500px' } }, h(\"monitor-bar-chart\", { data: [{ id: 'test', data: [TEST_DATA_POINT, TEST_DATA_POINT_2], resolution: MINUTE_IN_MS }], config: {\n                id: 'test-id',\n                size: {\n                    width: 500,\n                    height: 500,\n                },\n                dataStreamInfo: [\n                    {\n                        id: 'test',\n                        color: 'black',\n                        name: 'test stream',\n                    },\n                ],\n                viewPort: { yMin: Y_MIN, yMax: Y_MAX, start: X_MIN, end: X_MAX },\n            } }), h(\"monitor-webgl-context\", null)));\n    };\n    return MonitorWebglBarChartPositiveNegative;\n}());\nexport { MonitorWebglBarChartPositiveNegative as monitor_webgl_bar_chart_positive_negative };\n","var SECOND_IN_MS = 1000;\nvar MINUTE_IN_MS = 60 * SECOND_IN_MS;\nvar HOUR_IN_MS = 60 * MINUTE_IN_MS;\nvar DAY_IN_MS = 24 * HOUR_IN_MS;\n// Not precisely accurate, only estimates. exact duration depends on start date. use with care.\nvar MONTH_IN_MS = 30 * DAY_IN_MS;\nvar YEAR_IN_MS = 12 * MONTH_IN_MS;\n/**\n * ConvertMS is a helper function that will take in milliseconds and convert it to the highest detonator\n * and does not return the \"remainder\"\n *\n * It is important to note that the object returning does not represent equivalence!\n *\n * For Example:\n * convert(MINUTE_IN_MS) will return:\n * {\n *   day: 0,\n *   hour: 0\n *   minute: 1,\n *   seconds: 0,\n * }\n *\n * IT DOES NOT RETURN:\n *\n * {\n *   day: 0,\n *   hour: 0,\n *   minute: 1,\n *   seconds: 60, <--- does not return the \"equivalence\"\n * }\n */\nvar convertMS = function (milliseconds) {\n    if (milliseconds < 0) {\n        throw new Error('Time cannot be negative!');\n    }\n    var seconds = Math.floor(milliseconds / 1000);\n    var minute = Math.floor(seconds / 60);\n    var hour = Math.floor(minute / 60);\n    var day = Math.floor(hour / 24);\n    seconds %= 60;\n    minute %= 60;\n    hour %= 24;\n    return {\n        day: day,\n        hour: hour,\n        minute: minute,\n        seconds: seconds,\n    };\n};\nvar displayDate = function (date, resolution, _a) {\n    var start = _a.start, end = _a.end;\n    if (resolution < DAY_IN_MS) {\n        var viewPortDurationMS = end.getTime() - start.getTime();\n        if (viewPortDurationMS < MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                minute: 'numeric',\n                second: 'numeric',\n            });\n        }\n        if (viewPortDurationMS < 10 * MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: true,\n            });\n        }\n        return date.toLocaleString('en-US', {\n            hour: 'numeric',\n            minute: 'numeric',\n            hour12: true,\n        });\n    }\n    if (resolution <= HOUR_IN_MS) {\n        return date.toLocaleString('en-US', {\n            hour: 'numeric',\n            day: 'long',\n            hour12: true,\n        });\n    }\n    if (resolution <= DAY_IN_MS) {\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'long',\n        });\n    }\n    return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'long',\n    });\n};\nexport { DAY_IN_MS as D, HOUR_IN_MS as H, MINUTE_IN_MS as M, SECOND_IN_MS as S, YEAR_IN_MS as Y, MONTH_IN_MS as a, convertMS as c, displayDate as d };\n"],"sourceRoot":""}