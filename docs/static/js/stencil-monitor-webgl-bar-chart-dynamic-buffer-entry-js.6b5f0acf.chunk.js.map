{"version":3,"sources":["../node_modules/@amzn/bp-components/dist/esm-es5/monitor-webgl-bar-chart-dynamic-buffer.entry.js","../node_modules/@amzn/bp-components/dist/esm-es5/time-cc688558.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","X_MIN","Date","X_MAX","WIDTH","getTime","MonitorWebglBarChartDynamicBuffer","hostRef","_this","this","registerInstance","data","addDataPoint","dataPoint","x","y","prototype","render","h","id","onClick","style","height","width","marginTop","resolution","MONTH_IN_MS","config","dataStreamInfo","color","name","viewPort","yMin","yMax","start","end","bufferFactor","minBufferSize","SECOND_IN_MS","MINUTE_IN_MS","HOUR_IN_MS","DAY_IN_MS","YEAR_IN_MS","convertMS","milliseconds","Error","seconds","Math","floor","minute","hour","day","displayDate","date","_a","viewPortDurationMS","toLocaleString","second","hour12","month","year"],"mappings":"kJAAA,iGAAIA,EAAkD,WAClD,IAAK,IAAIC,EAAI,EAAGC,EAAI,EAAGC,EAAKC,UAAUC,OAAQH,EAAIC,EAAID,IAAKD,GAAKG,UAAUF,GAAGG,OACxE,IAAIC,EAAIC,MAAMN,GAAIO,EAAI,EAA3B,IAA8BN,EAAI,EAAGA,EAAIC,EAAID,IACzC,IAAK,IAAIO,EAAIL,UAAUF,GAAIQ,EAAI,EAAGC,EAAKF,EAAEJ,OAAQK,EAAIC,EAAID,IAAKF,IAC1DF,EAAEE,GAAKC,EAAEC,GACjB,OAAOJ,GAOPM,EAAQ,IAAIC,KAAK,KAAM,EAAG,GAC1BC,EAAQ,IAAID,KAAK,IAAM,EAAG,GAM1BE,EAAQD,EAAME,UAAYJ,EAAMI,UAChCC,EAAmD,WACnD,SAASA,EAAkCC,GACvC,IAAIC,EAAQC,KACZC,YAAiBD,KAAMF,GACvBE,KAAKE,KAAO,GACZF,KAAKG,aAAe,WAChB,IAAIC,EAAY,CAEZC,EAAG,IAAIZ,KAAKD,EAAMI,UAAYD,GAAS,EAAII,EAAMG,KAAKjB,SACtDqB,EAAG,MAEPP,EAAMG,KAAOtB,EAAe,CAACwB,GAAYL,EAAMG,OAqBvD,OAlBAL,EAAkCU,UAAUC,OAAS,WACjD,OAAQC,YAAE,MAAO,KAAMA,YAAE,SAAU,CAAEC,GAAI,iBAAkBC,QAASX,KAAKG,cAAgB,kBAAmBM,YAAE,MAAO,CAAEC,GAAI,kBAAmBE,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAASC,UAAW,SAAYN,YAAE,oBAAqB,CAAEP,KAAM,CAAC,CAAEQ,GAAI,OAAQR,KAAMF,KAAKE,KAAMc,WAAYC,MAAgBC,OAAQ,CAC1SR,GAAI,UACJS,eAAgB,CACZ,CACIT,GAAI,OACJU,MAAO,MACPC,KAAM,gBAGdC,SAAU,CACNC,KAnCR,EAoCQC,KAnCR,IAoCQC,MAAOjC,EACPkC,IAAKhC,IAEViC,aAAc,EAAGC,cAAe,IAAMnB,YAAE,wBAAyB,SAErEZ,EAhC4C,I,gCCpBvD,oRAAIgC,EAAe,IACfC,EAAe,GAAKD,EACpBE,EAAa,GAAKD,EAClBE,EAAY,GAAKD,EAEjBd,EAAc,GAAKe,EACnBC,EAAa,GAAKhB,EAyBlBiB,EAAY,SAAUC,GACtB,GAAIA,EAAe,EACf,MAAM,IAAIC,MAAM,4BAEpB,IAAIC,EAAUC,KAAKC,MAAMJ,EAAe,KACpCK,EAASF,KAAKC,MAAMF,EAAU,IAC9BI,EAAOH,KAAKC,MAAMC,EAAS,IAK/B,MAAO,CACHE,IALMJ,KAAKC,MAAME,EAAO,IAMxBA,KAHJA,GAAQ,GAIJD,OALJA,GAAU,GAMNH,QAPJA,GAAW,KAUXM,EAAc,SAAUC,EAAM5B,EAAY6B,GAC1C,IAAIpB,EAAQoB,EAAGpB,MAAOC,EAAMmB,EAAGnB,IAC/B,GAAIV,EAAagB,EAAW,CACxB,IAAIc,EAAqBpB,EAAI9B,UAAY6B,EAAM7B,UAC/C,OAAIkD,EAAqBhB,EACdc,EAAKG,eAAe,QAAS,CAChCP,OAAQ,UACRQ,OAAQ,YAGZF,EAAqB,GAAKhB,EACnBc,EAAKG,eAAe,QAAS,CAChCN,KAAM,UACND,OAAQ,UACRQ,OAAQ,UACRC,QAAQ,IAGTL,EAAKG,eAAe,QAAS,CAChCN,KAAM,UACND,OAAQ,UACRS,QAAQ,IAGhB,OAAIjC,GAAce,EACPa,EAAKG,eAAe,QAAS,CAChCN,KAAM,UACNC,IAAK,OACLO,QAAQ,IAGZjC,GAAcgB,EACPY,EAAKG,eAAe,QAAS,CAChCL,IAAK,UACLQ,MAAO,SAGRN,EAAKG,eAAe,QAAS,CAChCI,KAAM,UACND,MAAO","file":"static/js/stencil-monitor-webgl-bar-chart-dynamic-buffer-entry-js.6b5f0acf.chunk.js","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { r as registerInstance, h } from './index-326b73e4.js';\nimport { a as MONTH_IN_MS } from './time-cc688558.js';\n// viewport boundaries\nvar Y_MIN = 0;\nvar Y_MAX = 5000;\nvar X_MIN = new Date(1998, 0, 0);\nvar X_MAX = new Date(2000, 0, 1);\n/**\n * Testing route for the webGL rendering without being fully coupled to the chart.\n *\n * Used to test the behavior of a bar chart when adding/removing data points\n */\nvar WIDTH = X_MAX.getTime() - X_MIN.getTime();\nvar MonitorWebglBarChartDynamicBuffer = /** @class */ (function () {\n    function MonitorWebglBarChartDynamicBuffer(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.data = [];\n        this.addDataPoint = function () {\n            var dataPoint = {\n                // To generate new bar with half of the distance.\n                x: new Date(X_MIN.getTime() + WIDTH / (2 + _this.data.length)),\n                y: 2500,\n            };\n            _this.data = __spreadArrays([dataPoint], _this.data);\n        };\n    }\n    MonitorWebglBarChartDynamicBuffer.prototype.render = function () {\n        return (h(\"div\", null, h(\"button\", { id: \"add-data-point\", onClick: this.addDataPoint }, \"Add Data Point\"), h(\"div\", { id: \"chart-container\", style: { height: '500px', width: '500px', marginTop: '20px' } }, h(\"monitor-bar-chart\", { data: [{ id: 'test', data: this.data, resolution: MONTH_IN_MS }], config: {\n                id: 'test-id',\n                dataStreamInfo: [\n                    {\n                        id: 'test',\n                        color: 'red',\n                        name: 'test stream',\n                    },\n                ],\n                viewPort: {\n                    yMin: Y_MIN,\n                    yMax: Y_MAX,\n                    start: X_MIN,\n                    end: X_MAX,\n                },\n            }, bufferFactor: 1, minBufferSize: 1 }), h(\"monitor-webgl-context\", null))));\n    };\n    return MonitorWebglBarChartDynamicBuffer;\n}());\nexport { MonitorWebglBarChartDynamicBuffer as monitor_webgl_bar_chart_dynamic_buffer };\n","var SECOND_IN_MS = 1000;\nvar MINUTE_IN_MS = 60 * SECOND_IN_MS;\nvar HOUR_IN_MS = 60 * MINUTE_IN_MS;\nvar DAY_IN_MS = 24 * HOUR_IN_MS;\n// Not precisely accurate, only estimates. exact duration depends on start date. use with care.\nvar MONTH_IN_MS = 30 * DAY_IN_MS;\nvar YEAR_IN_MS = 12 * MONTH_IN_MS;\n/**\n * ConvertMS is a helper function that will take in milliseconds and convert it to the highest detonator\n * and does not return the \"remainder\"\n *\n * It is important to note that the object returning does not represent equivalence!\n *\n * For Example:\n * convert(MINUTE_IN_MS) will return:\n * {\n *   day: 0,\n *   hour: 0\n *   minute: 1,\n *   seconds: 0,\n * }\n *\n * IT DOES NOT RETURN:\n *\n * {\n *   day: 0,\n *   hour: 0,\n *   minute: 1,\n *   seconds: 60, <--- does not return the \"equivalence\"\n * }\n */\nvar convertMS = function (milliseconds) {\n    if (milliseconds < 0) {\n        throw new Error('Time cannot be negative!');\n    }\n    var seconds = Math.floor(milliseconds / 1000);\n    var minute = Math.floor(seconds / 60);\n    var hour = Math.floor(minute / 60);\n    var day = Math.floor(hour / 24);\n    seconds %= 60;\n    minute %= 60;\n    hour %= 24;\n    return {\n        day: day,\n        hour: hour,\n        minute: minute,\n        seconds: seconds,\n    };\n};\nvar displayDate = function (date, resolution, _a) {\n    var start = _a.start, end = _a.end;\n    if (resolution < DAY_IN_MS) {\n        var viewPortDurationMS = end.getTime() - start.getTime();\n        if (viewPortDurationMS < MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                minute: 'numeric',\n                second: 'numeric',\n            });\n        }\n        if (viewPortDurationMS < 10 * MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: true,\n            });\n        }\n        return date.toLocaleString('en-US', {\n            hour: 'numeric',\n            minute: 'numeric',\n            hour12: true,\n        });\n    }\n    if (resolution <= HOUR_IN_MS) {\n        return date.toLocaleString('en-US', {\n            hour: 'numeric',\n            day: 'long',\n            hour12: true,\n        });\n    }\n    if (resolution <= DAY_IN_MS) {\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'long',\n        });\n    }\n    return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'long',\n    });\n};\nexport { DAY_IN_MS as D, HOUR_IN_MS as H, MINUTE_IN_MS as M, SECOND_IN_MS as S, YEAR_IN_MS as Y, MONTH_IN_MS as a, convertMS as c, displayDate as d };\n"],"sourceRoot":""}